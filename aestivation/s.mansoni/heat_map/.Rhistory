mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
in_aest <- in_aestivation_afun(t)
out_aest <- out_aestivation_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S - in_aest * S + out_aest * SE
dSE <- in_aest * S - mu/re_est * SE - out_aest * SE
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E - in_aest*E + out_aest * EE
dEE <- in_aest * E - mu_i/re_est_i * EE - out_aest * EE
dI <- sigma_s * E - mu_i * I - in_aest*I + out_aest * IE
dIE <- in_aest * I - mu_i/re_est_i * IE - out_aest * IE
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, SE = dSE, E = dE, EE = dEE, I = dI, IE = dIE, P = dP, P_m = dP_m)))
})
}
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2, SE = 0,  E = 1285, EE = 0, I = 2340, IE = 0, P = 3, P_m = 130)
## solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_put[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),9])
}
out_come_season_mpb[epsilon, ] <- out_put
}
# Replace entries in out_come_season_mpb with 0 if they are greater than 100 or less than 2
out_come_season_mpb[out_come_season_mpb < 0.4] <- 0
prevalence <- wormPrevalenceSh(out_come_season_mpb)
averaged_prevalence <- (prevalence[, seq(1, ncol(prevalence) - 1, by = 2)] + prevalence[, seq(2, ncol(prevalence), by = 2)]) / 2
likelihood_sum_aestivation <- sum(dbinom(
x = cases_gntd_data,       # Observed cases
size = total_test_gntd_data, # Number of trials
prob = averaged_prevalence,        # Probability from model
log = TRUE
), na.rm = TRUE)  # Handle NA values
return(likelihood_sum_aestivation)
}
# Run optimization from different starts
opt_parameter <- optim(par = c(23, 0.085,  0.9), fn = objective_function, method = "BFGS")
# Run optimization from different starts
opt_parameter <- optim(
par = c(23, 0.085, 0.9),
fn = objective_function,
method = "L-BFGS-B",
lower = c(23, -Inf, -Inf),  # Lower bound for the first parameter only
upper = c(30, Inf, Inf)     # Upper bound for the first parameter only
)
dbinom(12, 100, 0)
dbinom(12, 100, 0,1)
dbinom(12, 100, 0,.1)
dbinom(12, 100,.1)
dbinom(12, 100,1)
dbinom(12, 100,.5)
dbinom(12, 100,12)
dbinom(12, 100,.012)
dbinom(12, 100,.5)
dbinom(12, 100,.1)
dbinom(12, 100,.05)
dbinom(12, 100,.15)
dbinom(12, 100,.2)
dbinom(NaN, NaN,.2)
dbinom(NaN, NaN,.6)
dbinom(NaN, NaN,0)
dbinom(.5, .2,0)
dbinom(5, 10, 0)
dbinom(5, 10, 0.5)
dbinom(5, 10, 0)
dbinom(5, 10, 0, log = TRUE)
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.haematobium/estimate_eastivation_function")
#clear environment
rm(list = ls())
#Likelihood value for seasonal model
load(file ="non_aestivation_output.RData")
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.26;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- rev(seq(min_eps, max_eps, by = epsilon_step))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_data_cases_number.csv')
# Filter S. haematobium data directly
sch_haematobium <- subset(prev_percent, parasite_s == "S. haematobium" & !is.na(bio01))
gntd_data <- data.frame(
MAT = sch_haematobium$bio01,
Eps = (sch_haematobium$bio10 - sch_haematobium$bio11) * pi / (sch_haematobium$bio01 * 4 * sqrt(2)),
Prev = sch_haematobium$total_number_pos,
Cases = sch_haematobium$total_number_exam
)
# Check the first few rows
head(gntd_data)
# Pre-allocate matrix for results
cases_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
total_test_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i] - temperature_step/2
temp_max <- temperatures[i] + temperature_step/2
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j] - epsilon_step/2
eps_max <- epsilons[j] + epsilon_step/2
index_eps <- gntd_data$Eps > eps_min & gntd_data$Eps <= eps_max
combined_index <- index_mat & index_eps
if (sum(combined_index) == 0) next  # Skip this iteration if no matching data
cases_gntd_data[j, i] <- sum(gntd_data$Prev[combined_index], na.rm = TRUE)
total_test_gntd_data[j, i] <- sum(gntd_data$Cases[combined_index], na.rm = TRUE)
}
}
# Compute the log-likelihood
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = out_come_season_prev,
log = TRUE
)
log_probs
log_probs[is.finite(log_probs)]
sum(log_probs[is.finite(log_probs)], na.rm = TRUE)
-2*likelihood_sum_seasonal
dbinom(5, 10, 0, log = TRUE)
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = out_come_season_prev,
log = FALSE
)
log_probs
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = out_come_season_prev,
log = FALSE
)
log_probs
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = out_come_season_prev,
log = TRUE
)
log_probs
dbinom(
x = 10,
size = 100,
prob = 0,
log = TRUE
)
dbinom(
x = 10,
size = 100,
prob = 0.1,
log = TRUE
)
dbinom(
x = 10,
size = 100,
prob = 0.001,
log = TRUE
)
load("/Users/ibrahimhalilaslan/Downloads/march_13_23.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.haematobium/heat_map")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < .4] <- 0
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSh(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.25;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Filter S. haematobium data directly
sch_haematobium <- subset(prev_percent, parasite_s == "S. haematobium" & !is.na(bio01))
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
MAT = sch_haematobium$bio01,
Epsilon = (sch_haematobium$bio10 - sch_haematobium$bio11) * pi / (sch_haematobium$bio01 * 4 * sqrt(2)),
Prevalence = sch_haematobium$percent_pos/100
)
# Pre-allocate matrix for results
new_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i]
temp_max <- temp_min + temperature_step
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j]
eps_max <- eps_min + epsilon_step
index_eps <- gntd_data$Epsilon > eps_min & gntd_data$Epsilon <= eps_max
combined_index <- index_mat & index_eps
#new_gntd_data[j, i] <- median(gntd_data$Prevalence[combined_index], na.rm = TRUE)
new_gntd_data[j, i] <- quantile(gntd_data$Prevalence[combined_index],
probs = 0.5,
na.rm = TRUE)
}
}
# Replace NA entries with zero
new_gntd_data[is.na(new_gntd_data)] <- 0
# Convert the matrix to a data frame of three columns
new_gntd_data_fram <- data.frame(
MAT = rep(temperatures, times = nrow(new_gntd_data)), # Second column: repeat row indices
Epsilon = rep(epsilons, each = ncol(new_gntd_data)), # Third column: repeat column indices
intensity = as.vector(t(new_gntd_data))                # First column: entries of the matrix
)
new_gntd_data_fram <- new_gntd_data_fram[-which(new_gntd_data_fram$intensity == 0),]
# upload whole africa bioclimate variables
##africa_temperature <- read.csv(file = 'Africa_BIOCLIM.csv')
# Convert bioclimate variables into seasonality
#df_africa_temperature <- data.frame(
##  x = africa_temperature$BIO1,
# y = (africa_temperature$BIO10-africa_temperature$BIO11)*pi/(africa_temperature$BIO1*4*sqrt(2))
#)
# Remove the temperature values out of our interest
#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_mean.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot gntd_data with color based on intensity
geom_point(data = new_gntd_data_fram, aes(x = MAT, y = Epsilon, fill = intensity), size = 2, alpha = .5, shape = 16, color = "black") +
scale_fill_gradient2(aes(fill = intensity), low = "white", high = "black", midpoint = .5, name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(haematobium))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence),
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(haematobium))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium_trans.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence), alpha = 0.5,
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(haematobium))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.mansoni/heat_map/march_13_23.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.mansoni/heat_map")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < .8] <- 0
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSm(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.25;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Filter S. mansoni data directly
sch_mansoni <- subset(prev_percent, parasite_s == "S. mansoni" & percent_pos != 0 & !is.na(bio01))
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
MAT = sch_mansoni$bio01,
Epsilon = (sch_mansoni$bio10 - sch_mansoni$bio11) * pi / (sch_mansoni$bio01 * 4 * sqrt(2)),
Prevalence = sch_mansoni$percent_pos/100
)
# Pre-allocate matrix for results
new_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i]
temp_max <- temp_min + temperature_step
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j]
eps_max <- eps_min + epsilon_step
index_eps <- gntd_data$Epsilon > eps_min & gntd_data$Epsilon <= eps_max
combined_index <- index_mat & index_eps
#new_gntd_data[j, i] <- median(gntd_data$Prevalence[combined_index], na.rm = TRUE)
new_gntd_data[j, i] <- quantile(gntd_data$Prevalence[combined_index],
probs = 0.5,
na.rm = TRUE)
}
}
# Replace NA entries with zero
new_gntd_data[is.na(new_gntd_data)] <- 0
# Convert the matrix to a data frame of three columns
new_gntd_data_fram <- data.frame(
MAT = rep(temperatures, times = nrow(new_gntd_data)), # Second column: repeat row indices
Epsilon = rep(epsilons, each = ncol(new_gntd_data)), # Third column: repeat column indices
intensity = as.vector(t(new_gntd_data))                # First column: entries of the matrix
)
new_gntd_data_fram <- new_gntd_data_fram[-which(new_gntd_data_fram$intensity == 0),]
# upload whole africa bioclimate variables
##africa_temperature <- read.csv(file = 'Africa_BIOCLIM.csv')
# Convert bioclimate variables into seasonality
#df_africa_temperature <- data.frame(
##  x = africa_temperature$BIO1,
# y = (africa_temperature$BIO10-africa_temperature$BIO11)*pi/(africa_temperature$BIO1*4*sqrt(2))
#)
# Remove the temperature values out of our interest
#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_mansoni_mean.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot gntd_data with color based on intensity
geom_point(data = new_gntd_data_fram, aes(x = MAT, y = Epsilon, fill = intensity), size = 2, alpha = .5, shape = 16, color = "black") +
scale_fill_gradient2(aes(fill = intensity), low = "white", high = "black", midpoint = .5, name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(mansoni))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_mansoni.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence),
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
# Customize x-axis
scale_x_continuous(
limits = c(14, 32),     # Set the range
breaks = seq(15, 30, 5) # Set the breaks from 12 to 32 in increments of 5
) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(mansoni))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_mansoni_trans.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence), alpha = 0.5,
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
# Customize x-axis
scale_x_continuous(
limits = c(14, 32),     # Set the range
breaks = seq(15, 30, 5) # Set the breaks from 12 to 32 in increments of 5
) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(paste(italic(S.), " ", italic(mansoni))* " with adaptive behaviors"))+
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
