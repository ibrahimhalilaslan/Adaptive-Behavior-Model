p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
outputs_prev <- wormPrevalenceSh(outputs_1_mpb)
save.image("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2024_dec_5th_ver_R/aestivation/s.haematobium/estimate_eastivation_function/constant_temp.RData")
outputs_prev
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2024_dec_5th_ver_R/aestivation/s.mansoni/estimate_eastivation_function")
# This  script simulates the mean parasite burden (MPB) with seasonal temperature
# We want to see the effect of seasonality on MPB and the optimal temperature.
############### we run the model with multiply many mean temperature and three different seasonality
rm(list = ls())
library(foreach)
library(doParallel)
# run the parameter script
source("par_set_mansoni.R")
# This function calculate the average number of mated pair of worm given MPB
phiSm <- function(M) {
# Define the function to be integrated
k <- exp(0.61521*log(M) - 4.844146)
integrand <- function(x) {
(1 - cos(x)) / ((1 + (M / (M + k)) * cos(x))^(1 + k))
}
# Perform the integration
integral_result <- integrate(integrand, lower = 0, upper = 2 * pi)
# Calculate the prevalence
p <- 1 - (((k / (M + k))^(1 + k))/ (2 * pi)) * integral_result$value
return(p)
}
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, 0.5);
# Set a matrix to record the outputs
out_puts <-c()
#create a function to run the model with seasonality
seaonality_effect <- function(epsilon){
# For loop to run the model for each temperature
for (j in 1:length(temperature)){
# Set the number of year to run the model
year <- 40
step_size <- 0.05
# Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space of parameters for each day
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 35.5,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 34,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 3, P_m = 130)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_puts[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),6])
}
return(out_puts)
}
#Run the model with different seasonality
outputs_1_mpb <- seaonality_effect(0)
# This  script simulates the mean parasite burden (MPB) with seasonal temperature
# We want to see the effect of seasonality on MPB and the optimal temperature.
############### we run the model with multiply many mean temperature and three different seasonality
rm(list = ls())
library(foreach)
library(doParallel)
# run the parameter script
source("par_set_mansoni.R")
# This function calculate the average number of mated pair of worm given MPB
phiSm <- function(M) {
# Define the function to be integrated
k <- exp(0.61521*log(M) - 4.844146)
integrand <- function(x) {
(1 - cos(x)) / ((1 + (M / (M + k)) * cos(x))^(1 + k))
}
# Perform the integration
integral_result <- integrate(integrand, lower = 0, upper = 2 * pi)
# Calculate the prevalence
p <- 1 - (((k / (M + k))^(1 + k))/ (2 * pi)) * integral_result$value
return(p)
}
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, 0.5);
# Set a matrix to record the outputs
out_puts <-c()
#create a function to run the model with seasonality
seaonality_effect <- function(epsilon){
# For loop to run the model for each temperature
for (j in 1:length(temperature)){
# Set the number of year to run the model
year <- 40
step_size <- 0.05
# Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space of parameters for each day
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 35.5,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 34,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 3, P_m = 130)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_puts[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),6])
}
return(out_puts)
}
#Run the model with different seasonality
outputs_1_mpb <- seaonality_effect(0)
outputs_1_mpb[outputs_1_mpb < .8] <- 0
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
out_come_season_prev <- wormPrevalenceSm(outputs_1_mpb)
out_come_season_prev
getwd()
save.image("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2024_dec_5th_ver_R/aestivation/s.mansoni/estimate_eastivation_function/constant_temp.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2024_dec_5th_ver_R/aestivation/s.mansoni/estimate_eastivation_function")
#clear environment
rm(list = ls())
load("my_environment_10.RData")
prevalence_percentage_1 <- prevalence_percentage_m
load("my_environment_20.RData")
prevalence_percentage_2 <- prevalence_percentage_m
load("my_environment_30.RData")
prevalence_percentage_3 <- prevalence_percentage_m
load("my_environment_40.RData")
prevalence_percentage_4 <- prevalence_percentage_m
load("my_environment_50.RData")
prevalence_percentage_5 <- prevalence_percentage_m
load("my_environment_60.RData")
prevalence_percentage_6 <- prevalence_percentage_m
load("my_environment_70.RData")
prevalence_percentage_7 <- prevalence_percentage_m
load("my_environment_80.RData")
prevalence_percentage_8 <- prevalence_percentage_m
load("my_environment_90.RData")
prevalence_percentage_9 <- prevalence_percentage_m
load("my_environment_100.RData")
prevalence_percentage_10 <- prevalence_percentage_m
load("my_environment_110.RData")
prevalence_percentage_11 <- prevalence_percentage_m
load("my_environment_120.RData")
prevalence_percentage_12 <- prevalence_percentage_m
load("my_environment_130.RData")
prevalence_percentage_13 <- prevalence_percentage_m
load("my_environment_140.RData")
prevalence_percentage_14 <- prevalence_percentage_m
load("my_environment_150.RData")
prevalence_percentage_15 <- prevalence_percentage_m
load("my_environment_160.RData")
prevalence_percentage_16 <- prevalence_percentage_m
load("my_environment_170.RData")
prevalence_percentage_17 <- prevalence_percentage_m
load("my_environment_180.RData")
prevalence_percentage_18 <- prevalence_percentage_m
load("my_environment_190.RData")
prevalence_percentage_19 <- prevalence_percentage_m
load("my_environment_200.RData")
prevalence_percentage_20 <- prevalence_percentage_m
load("my_environment_210.RData")
prevalence_percentage_21 <- prevalence_percentage_m
load("my_environment_220.RData")
prevalence_percentage_22 <- prevalence_percentage_m
load("my_environment_230.RData")
prevalence_percentage_23 <- prevalence_percentage_m
load("my_environment_240.RData")
prevalence_percentage_24 <- prevalence_percentage_m
load("my_environment_250.RData")
prevalence_percentage_25 <- prevalence_percentage_m
load("my_environment_260.RData")
prevalence_percentage_26 <- prevalence_percentage_m
load("my_environment_270.RData")
prevalence_percentage_27 <- prevalence_percentage_m
load("my_environment_280.RData")
prevalence_percentage_28 <- prevalence_percentage_m
load("my_environment_290.RData")
prevalence_percentage_29 <- prevalence_percentage_m
load("my_environment_300.RData")
prevalence_percentage_30 <- prevalence_percentage_m
load("my_environment_310.RData")
prevalence_percentage_31 <- prevalence_percentage_m
load("my_environment_320.RData")
prevalence_percentage_32 <- prevalence_percentage_m
load("my_environment_330.RData")
prevalence_percentage_33 <- prevalence_percentage_m
load("my_environment_340.RData")
prevalence_percentage_34 <- prevalence_percentage_m
load("my_environment_350.RData")
prevalence_percentage_35 <- prevalence_percentage_m
load("my_environment_360.RData")
prevalence_percentage_36 <- prevalence_percentage_m
load("my_environment_370.RData")
prevalence_percentage_37 <- prevalence_percentage_m
load("my_environment_380.RData")
prevalence_percentage_38 <- prevalence_percentage_m
load("my_environment_390.RData")
prevalence_percentage_39 <- prevalence_percentage_m
load("my_environment_400.RData")
prevalence_percentage_40 <- prevalence_percentage_m
load("my_environment_410.RData")
prevalence_percentage_41 <- prevalence_percentage_m
load("my_environment_420.RData")
prevalence_percentage_42 <- prevalence_percentage_m
load("my_environment_430.RData")
prevalence_percentage_43 <- prevalence_percentage_m
load("my_environment_440.RData")
prevalence_percentage_44 <- prevalence_percentage_m
load("my_environment_450.RData")
prevalence_percentage_45 <- prevalence_percentage_m
load("my_environment_460.RData")
prevalence_percentage_46 <- prevalence_percentage_m
load("my_environment_470.RData")
prevalence_percentage_47 <- prevalence_percentage_m
load("my_environment_480.RData")
prevalence_percentage_48 <- prevalence_percentage_m
load("my_environment_490.RData")
prevalence_percentage_49 <- prevalence_percentage_m
load("my_environment_500.RData")
prevalence_percentage_50 <- prevalence_percentage_m
load("my_environment_510.RData")
prevalence_percentage_51 <- prevalence_percentage_m
load("my_environment_520.RData")
prevalence_percentage_52 <- prevalence_percentage_m
load("my_environment_530.RData")
prevalence_percentage_53 <- prevalence_percentage_m
load("my_environment_540.RData")
prevalence_percentage_54 <- prevalence_percentage_m
load("my_environment_550.RData")
prevalence_percentage_55 <- prevalence_percentage_m
load("my_environment_560.RData")
prevalence_percentage_56 <- prevalence_percentage_m
load("my_environment_570.RData")
prevalence_percentage_57 <- prevalence_percentage_m
load("my_environment_580.RData")
prevalence_percentage_58 <- prevalence_percentage_m
load("my_environment_590.RData")
prevalence_percentage_59 <- prevalence_percentage_m
load("my_environment_600.RData")
prevalence_percentage_60 <- prevalence_percentage_m
prevalence_percentage <- c(prevalence_percentage_1, prevalence_percentage_2, prevalence_percentage_3,
prevalence_percentage_4, prevalence_percentage_5, prevalence_percentage_6,
prevalence_percentage_7, prevalence_percentage_8, prevalence_percentage_9,
prevalence_percentage_10,prevalence_percentage_11, prevalence_percentage_12,
prevalence_percentage_13, prevalence_percentage_14, prevalence_percentage_15,
prevalence_percentage_16, prevalence_percentage_17, prevalence_percentage_18,
prevalence_percentage_19, prevalence_percentage_20, prevalence_percentage_21,
prevalence_percentage_22, prevalence_percentage_23, prevalence_percentage_24,
prevalence_percentage_25, prevalence_percentage_26, prevalence_percentage_27,
prevalence_percentage_28, prevalence_percentage_29, prevalence_percentage_30,
prevalence_percentage_31, prevalence_percentage_32, prevalence_percentage_33,
prevalence_percentage_34, prevalence_percentage_35, prevalence_percentage_36,
prevalence_percentage_37, prevalence_percentage_38, prevalence_percentage_39,
prevalence_percentage_40, prevalence_percentage_41, prevalence_percentage_42,
prevalence_percentage_43, prevalence_percentage_44, prevalence_percentage_45,
prevalence_percentage_46, prevalence_percentage_47, prevalence_percentage_48,
prevalence_percentage_49, prevalence_percentage_50, prevalence_percentage_51,
prevalence_percentage_52, prevalence_percentage_53, prevalence_percentage_54,
prevalence_percentage_55, prevalence_percentage_56, prevalence_percentage_57,
prevalence_percentage_58, prevalence_percentage_59, prevalence_percentage_60)
saveRDS(prevalence_percentage, file = "prevalence_list.rds")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.mansoni/estimate_eastivation_function")
#clear environment
rm(list = ls())
#Likelihood value for seasonal model
load(file ="non_aestivation_output.RData")
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.26;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- rev(seq(min_eps, max_eps, by = epsilon_step))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_data_cases_number.csv')
# Filter S. haematobium data directly
sch_mansoni <- subset(prev_percent, parasite_s == "S. mansoni" & !is.na(bio01))
gntd_data <- data.frame(
MAT = sch_mansoni$bio01,
Eps = (sch_mansoni$bio10 - sch_mansoni$bio11) * pi / (sch_mansoni$bio01 * 4 * sqrt(2)),
Prev = sch_mansoni$total_number_pos,
Cases = sch_mansoni$total_number_exam
)
# Check the first few rows
head(gntd_data)
# Pre-allocate matrix for results
cases_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
total_test_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i] - temperature_step/2
temp_max <- temperatures[i] + temperature_step/2
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j] - epsilon_step/2
eps_max <- epsilons[j] + epsilon_step/2
index_eps <- gntd_data$Eps > eps_min & gntd_data$Eps <= eps_max
combined_index <- index_mat & index_eps
if (sum(combined_index) == 0) next  # Skip this iteration if no matching data
cases_gntd_data[j, i] <- sum(gntd_data$Prev[combined_index], na.rm = TRUE)
total_test_gntd_data[j, i] <- sum(gntd_data$Cases[combined_index], na.rm = TRUE)
}
}
out_come_season_prev <- pmax(pmin(out_come_season_prev, 1 - 1e-15), 1e-15)
# Compute the log-likelihood
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = out_come_season_prev,
log = TRUE
)
# Sum only finite values, ignoring NA
likelihood_sum_seasonal <- sum(log_probs, na.rm = TRUE)
#Likelihood value for eastivation model
likelihood_value_model_seasonal <- -2*likelihood_sum_seasonal
#Likelihood value for seasonal model
load(file ="constant_temp.RData")
# Apply the function to each matrix in the list
outputs_prev_mat <- matrix(rep(out_come_season_prev, times = nrow(cases_gntd_data)),
nrow = nrow(cases_gntd_data),
byrow = TRUE)
outputs_prev_mat <- pmax(pmin(outputs_prev_mat, 1 - 1e-15), 1e-15)
# Compute the log-likelihood
log_probs <- dbinom(
x = cases_gntd_data,
size = total_test_gntd_data,
prob = outputs_prev_mat,
log = TRUE
)
# Sum only finite values, ignoring NA
likelihood_sum_constant <- sum(log_probs, na.rm = TRUE)
#Likelihood value for eastivation model
likelihood_value_model_constant <- -2*likelihood_sum_constant
# Load it back when needed
#prevalence_percentage <- readRDS("prevalence_percentage.rds")
prevalence_percentage <- readRDS("prevalence_list.rds")
# Initialize a vector to store likelihood values
likelihood_sum_aestivation <- numeric(length(prevalence_percentage))
# Loop over k matrices
for (k in seq_along(prevalence_percentage)) {
# Ensure the probability matrix has valid values (0 < p < 1)
prob_matrix <- prevalence_percentage[[k]]
prob_matrix[prob_matrix <= 0] <- 1e-10  # Avoid log(0) issues
prob_matrix[prob_matrix >= 1] <- 1 - 1e-10
# Compute the log-likelihood
likelihood_sum_aestivation[k] <- sum(dbinom(
x = cases_gntd_data,       # Observed cases
size = total_test_gntd_data, # Number of trials
prob = prob_matrix,        # Probability from model
log = TRUE
), na.rm = TRUE)  # Handle NA values
}
# We start with setting our eastivation function
aest_temp_seq <- seq(from = 22.5, to = 27, by = .5)
# set the rate of snails move to the estivation stages
aest_rate_seq <- seq(from = 0.005, to = 0.1, by = 0.02)
# Set the steepness of estivation function for hot temperature
steepness_seq <-  seq(from = 0.1, to = 1.5, by = 0.2)
# Generate all combinations
combinations_1 <- expand.grid(aest_temp_seq, aest_rate_seq, steepness_seq)
# We start with setting our eastivation function
aest_temp_seq <- seq(from = 20, to = 22, by = .5)
# set the rate of snails move to the estivation stages
aest_rate_seq <- seq(from = 0.005, to = 0.1, by = 0.02)
# Set the steepness of estivation function for hot temperature
steepness_seq <-  seq(from = 0.1, to = 1.5, by = 0.2)
# Generate all combinations
combinations_2 <- expand.grid(aest_temp_seq, aest_rate_seq, steepness_seq)
# Generate all combinations
combinations <- rbind(combinations_1, combinations_2)
#Likelihood value for eastivation model
likelihood_value_model_aestivation <- -2*likelihood_sum_aestivation[which.max(likelihood_sum_aestivation)]+2*3
combinations[which.max(likelihood_sum_aestivation),]
#remove 22.5
index_remove <- which(combinations[,1] == 22.5)
likelihood_sum_aestivation_remove <- likelihood_sum_aestivation[-index_remove]
likelihood_value_model_aestivation_remove <- -2*likelihood_sum_aestivation_remove[which.max(likelihood_sum_aestivation_remove)]+2*3
combinations_remove <- combinations[-index_remove,]
combinations_remove[which.max(likelihood_sum_aestivation_remove),]
likelihood_value_model_aestivation
combinations[which.max(likelihood_sum_aestivation),]
#remove 22.5
index_remove <- which(combinations[,1] >= 22.5)
likelihood_sum_aestivation_remove <- likelihood_sum_aestivation[-index_remove]
likelihood_value_model_aestivation_remove <- -2*likelihood_sum_aestivation_remove[which.max(likelihood_sum_aestivation_remove)]+2*3
combinations_remove <- combinations[-index_remove,]
combinations_remove[which.max(likelihood_sum_aestivation_remove),]
#remove 22.5
index_remove <- which(combinations[,1] <= 22.5)
likelihood_sum_aestivation_remove <- likelihood_sum_aestivation[-index_remove]
likelihood_value_model_aestivation_remove <- -2*likelihood_sum_aestivation_remove[which.max(likelihood_sum_aestivation_remove)]+2*3
combinations_remove <- combinations[-index_remove,]
combinations_remove[which.max(likelihood_sum_aestivation_remove),]
likelihood_value_model_aestivation_remove
likelihood_value_model_constant
likelihood_value_model_seasonal
