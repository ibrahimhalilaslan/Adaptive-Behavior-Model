max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.25;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Filter S. haematobium data directly
sch_haematobium <- subset(prev_percent, parasite_s == "S. haematobium" & percent_pos != 0 & !is.na(bio01))
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
MAT = sch_haematobium$bio01,
Epsilon = (sch_haematobium$bio10 - sch_haematobium$bio11) * pi / (sch_haematobium$bio01 * 4 * sqrt(2)),
Prevalence = sch_haematobium$percent_pos/100
)
# Pre-allocate matrix for results
new_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i]
temp_max <- temp_min + temperature_step
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j]
eps_max <- eps_min + epsilon_step
index_eps <- gntd_data$Epsilon > eps_min & gntd_data$Epsilon <= eps_max
combined_index <- index_mat & index_eps
#new_gntd_data[j, i] <- median(gntd_data$Prevalence[combined_index], na.rm = TRUE)
new_gntd_data[j, i] <- quantile(gntd_data$Prevalence[combined_index],
probs = 0.5,
na.rm = TRUE)
}
}
# Replace NA entries with zero
new_gntd_data[is.na(new_gntd_data)] <- 0
# Convert the matrix to a data frame of three columns
new_gntd_data_fram <- data.frame(
MAT = rep(temperatures, times = nrow(new_gntd_data)), # Second column: repeat row indices
Epsilon = rep(epsilons, each = ncol(new_gntd_data)), # Third column: repeat column indices
intensity = as.vector(t(new_gntd_data))                # First column: entries of the matrix
)
new_gntd_data_fram <- new_gntd_data_fram[-which(new_gntd_data_fram$intensity == 0),]
# upload whole africa bioclimate variables
##africa_temperature <- read.csv(file = 'Africa_BIOCLIM.csv')
# Convert bioclimate variables into seasonality
#df_africa_temperature <- data.frame(
##  x = africa_temperature$BIO1,
# y = (africa_temperature$BIO10-africa_temperature$BIO11)*pi/(africa_temperature$BIO1*4*sqrt(2))
#)
# Remove the temperature values out of our interest
#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_mean.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot gntd_data with color based on intensity
geom_point(data = new_gntd_data_fram, aes(x = MAT, y = Epsilon, fill = intensity), size = 2, alpha = .5, shape = 16, color = "black") +
scale_fill_gradient2(aes(fill = intensity), low = "white", high = "black", midpoint = .5, name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence),
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium_trans.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence), alpha = 0.5,
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_nov_21st_ver_R/aestivation/s.haematobium/heat_map/december_2.RData")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < .4] <- 0
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSh(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# Set minimum temperature
min_tem <- 14;
# Set maximum temperature
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.25;
temperature_step <- 0.5
epsilon_step <- 0.02
# Define temperature and epsilon ranges
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Filter S. haematobium data directly
sch_haematobium <- subset(prev_percent, parasite_s == "S. haematobium" & percent_pos != 0 & !is.na(bio01))
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
MAT = sch_haematobium$bio01,
Epsilon = (sch_haematobium$bio10 - sch_haematobium$bio11) * pi / (sch_haematobium$bio01 * 4 * sqrt(2)),
Prevalence = sch_haematobium$percent_pos/100
)
# Pre-allocate matrix for results
new_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Use nested loops for temperature and epsilon bins
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i]
temp_max <- temp_min + temperature_step
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j]
eps_max <- eps_min + epsilon_step
index_eps <- gntd_data$Epsilon > eps_min & gntd_data$Epsilon <= eps_max
combined_index <- index_mat & index_eps
#new_gntd_data[j, i] <- median(gntd_data$Prevalence[combined_index], na.rm = TRUE)
new_gntd_data[j, i] <- quantile(gntd_data$Prevalence[combined_index],
probs = 0.5,
na.rm = TRUE)
}
}
# Replace NA entries with zero
new_gntd_data[is.na(new_gntd_data)] <- 0
# Convert the matrix to a data frame of three columns
new_gntd_data_fram <- data.frame(
MAT = rep(temperatures, times = nrow(new_gntd_data)), # Second column: repeat row indices
Epsilon = rep(epsilons, each = ncol(new_gntd_data)), # Third column: repeat column indices
intensity = as.vector(t(new_gntd_data))                # First column: entries of the matrix
)
new_gntd_data_fram <- new_gntd_data_fram[-which(new_gntd_data_fram$intensity == 0),]
# upload whole africa bioclimate variables
##africa_temperature <- read.csv(file = 'Africa_BIOCLIM.csv')
# Convert bioclimate variables into seasonality
#df_africa_temperature <- data.frame(
##  x = africa_temperature$BIO1,
# y = (africa_temperature$BIO10-africa_temperature$BIO11)*pi/(africa_temperature$BIO1*4*sqrt(2))
#)
# Remove the temperature values out of our interest
#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_mean.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot gntd_data with color based on intensity
geom_point(data = new_gntd_data_fram, aes(x = MAT, y = Epsilon, fill = intensity), size = 2, alpha = .5, shape = 16, color = "black") +
scale_fill_gradient2(aes(fill = intensity), low = "white", high = "black", midpoint = .5, name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence),
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium_trans.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
# Create the ggplot
ggplot() +
# Plot df data with color based on Prev.
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15, alpha = 1) +
scale_colour_gradient2(aes(colour = Prev.), low = "white", mid = "yellow", high = "red", midpoint = -0.25+ median(df$Prev., na.rm = TRUE), na.value = "#AED6F1", name = "Simulation Prev.") +
# Plot new_gntd_data_fram with intensity using fill aesthetic
geom_point(data = gntd_data, aes(x = MAT, y = Epsilon, fill = Prevalence), alpha = 0.5,
size = .75, shape = 21, stroke = 0, color = "black") + # Shape 21 supports fill
scale_fill_gradient(low = "white", high = "black", name = "GNTD Data Prev.") +
# Switch the order of the legends without changing their appearance
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15),  # Increase legend text size
legend.title = element_text(size = 15))
dev.off()
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/aestivation/s.haematobium/heat_map/december_2.RData")
out_come_season
out_come_season[1,]
out_come_season[20,]
out_come_season[40,]
out_come_season[35,]
out_come_season[30,]
out_come_season[27,]
31-11
21*(12)
max_tem <- 31;
# Set minimum epsilon
min_eps <- 0.02;
# Set maximum epsilon
max_eps <- 0.26;
# Set minimum temperature
min_tem <- 14;
temperature_step <- 0.5
epsilon_step <- 0.02
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
temperatures*epsilons
length(temperatures)*length(epsilons)
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality/august_2.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality")
# This  script simulates the mean parasite burden (MPB) with seasonal temperature
# We want to see the effect of seasonality on MPB and the optimal temperature.
############### we run the model with multiply many mean temperature and three different seasonality
rm(list = ls())
library(foreach)
library(doParallel)
# run the parameter script
source("par_set_mansoni.R")
# This function calculate the average number of mated pair of worm given MPB
phiSm <- function(M) {
# Define the function to be integrated
k <- exp(0.61521*log(M) - 4.844146)
integrand <- function(x) {
(1 - cos(x)) / ((1 + (M / (M + k)) * cos(x))^(1 + k))
}
# Perform the integration
integral_result <- integrate(integrand, lower = 0, upper = 2 * pi)
# Calculate the prevalence
p <- 1 - (((k / (M + k))^(1 + k))/ (2 * pi)) * integral_result$value
return(p)
}
# Set minimum temperature
min_tem <- 12;
# Set maximum temperature
max_tem <- 31;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, 0.1);
# Set a matrix to record the outputs
out_puts <-c()
#create a function to run the model with seasonality
seaonality_effect <- function(epsilon){
# For loop to run the model for each temperature
for (j in 1:length(temperature)){
# Set the number of year to run the model
year <- 40
step_size <- 0.05
# Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space of parameters for each day
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 35.5,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 34,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 3, P_m = 130)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_puts[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),6])
}
return(out_puts)
}
#Run the model with different seasonality
outputs_1_mpb <- seaonality_effect(0)
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality/august_2.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality")
#convert mean parasite burden to prevalence
outputs_1 <- wormPrevalenceSm(outputs_1_mpb)
outputs_2 <- wormPrevalenceSm(outputs_2_mpb)
outputs_3 <- wormPrevalenceSm(outputs_3_mpb)
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_prevalence.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, outputs_1, col = "black",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
ylim = c(0, 1))
lines(temperature, outputs_2, col = "blue", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, outputs_3, col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = 29, y = 0.95, labels = expression((T[opt] * "," ~ Prev[max])), col = "black", cex = 1.2)
text(x = 29, y = 0.9, labels = '(24, 0.74)', col = "black", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_1)], y0 = max(outputs_1),
x1 = 27, y1 = 0.9, col = "black", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.85, labels = '(23.7, 0.69)', col = "blue", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_2)], y0 = max(outputs_2),
x1 = 27, y1 = 0.85, col = "blue", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.8, labels = '(21.8, 0.49)', col = "red", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_3)], y0 = max(outputs_3),
x1 = 27, y1 = 0.8, col = "red", length = 0.1, lty = 3, lwd = 3)
legend(x = 10, y = 1.075,  legend = expression(paste("Constant Temp., ", epsilon, " = 0")), bty = "n", cex = 1.5, text.col = "black")
#legend(x = 16.5, y = 0.64, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 1.025,  legend = expression(paste("Low seasonality, ", epsilon, " = 0.1")), bty = "n", cex = 1.5, text.col = "blue")
#legend(x = 16.5, y = 0.61, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = .975,  legend = expression(paste("High seasonality, ", epsilon, " = 0.25")), bty = "n", cex = 1.5, text.col = "red")
#legend(x = 16.5, y = 0.58, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
#mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = expression(paste(italic(Schistosome), " Prevalence")), side = 2, line = 4, cex = 2)
mtext(text = expression(paste(italic(S.), " ", italic(mansoni))), side = 3, line = 4, cex = 2)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(outputs_1), which.max(outputs_2), which.max(outputs_3))
arrows(x0 = temperature[points_to_connect[1]], y0 = outputs_1[points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = outputs_2[points_to_connect[2]],
col = "black", length = 0.1, lty = 1, lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = outputs_2[points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = outputs_3[points_to_connect[3]],
col = "black", length = 0.1, lty = 1, lwd = 3)
dev.off()
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/aestivation/s.mansoni/multiple_epsilon/december_3.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_dec_5th_ver_R/aestivation/s.mansoni/multiple_epsilon")
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSm(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSm(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSm(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "black",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "blue", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = 29, y = 0.9, labels = '(23.1, 0.69)', col = "black", cex = 1.5)
arrows(x0 = temperature[which.max(out_come_season[1,])], y0 = max(out_come_season[1,]),
x1 = 27, y1 = 0.9, col = "black", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.85, labels = '(22.8, 0.63)', col = "blue", cex = 1.5)
arrows(x0 = temperature[which.max(out_come_season[2,])], y0 = max(out_come_season[2,]),
x1 = 27, y1 = 0.85, col = "blue", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.8, labels = '(20.9, 0.40)', col = "red", cex = 1.5)
arrows(x0 = temperature[which.max(out_come_season[3,])], y0 = max(out_come_season[3,]),
x1 = 27, y1 = 0.8, col = "red", length = 0.1, lty = 3, lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = expression(paste(italic(Schistosome), " Prevalence")), side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.mansoni)), side = 3, line = 4, cex = 2)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, lty = 1, lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, lty = 1, lwd = 3)
dev.off()
