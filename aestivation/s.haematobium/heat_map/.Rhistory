#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.haematobium/heat_map/july_23.RData")
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.haematobium/heat_map/july_23.RData")
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < 1] <- 0
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSh(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Extract S.haematobium data set from gntd data set
sch_haematobium_ind <- which(prev_percent$parasite_s == "S. haematobium")
sch_haematobium <- prev_percent[sch_haematobium_ind, ]
sch_haematobium <- sch_haematobium[-which(sch_haematobium$percent_pos == 0),]
sch_haematobium <- sch_haematobium[-c(which(is.na(sch_haematobium$bio01))),]
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
x = sch_haematobium$bio01,
y = (sch_haematobium$bio10-sch_haematobium$bio11)*pi/(sch_haematobium$bio01*4*sqrt(2)),
intensity = sch_haematobium$percent_pos
)
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = "", #expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(italic("S. haematobium"))) +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.mansoni/heat_map/july_22.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.mansoni/heat_map")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < 2.5 | is.na(out_come_season)] <- 0
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSm(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Extract S.mansoni data set from gntd data set
sch_mansoni_ind <- which(prev_percent$parasite_s == "S. mansoni")
sch_mansoni <- prev_percent[sch_mansoni_ind, ]
sch_mansoni <- sch_mansoni[-which(sch_mansoni$percent_pos == 0),]
sch_mansoni <- sch_mansoni[-c(which(is.na(sch_mansoni$bio01))),]
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
x = sch_mansoni$bio01,
y = (sch_mansoni$bio10-sch_mansoni$bio11)*pi/(sch_mansoni$bio01*4*sqrt(2)),
intensity = sch_mansoni$percent_pos
)
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_mansoni_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = "",#,
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(italic("S. mansoni"))) +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))#+
#geom_text(x = 30, y = .331, label = " Simulation\n GNTD data",
#      size = 4, hjust = 0, vjust = 2, colour = "black") +
# geom_text(x = 29, y = .39, label = ".",
#         size = 20, hjust = 0, vjust = 2, colour = "red") +
#geom_text(x = 29, y = .37, label = ".",
#         size = 20, hjust = 0, vjust = 2, colour = "black")
dev.off()
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/aestivation/s.mansoni/heat_map")
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/aestivation/s.mansoni/heat_map/july_22.RData")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < 2.5] <- 0
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSm(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Extract S.mansoni data set from gntd data set
sch_mansoni_ind <- which(prev_percent$parasite_s == "S. mansoni")
sch_mansoni <- prev_percent[sch_mansoni_ind, ]
sch_mansoni <- sch_mansoni[-which(sch_mansoni$percent_pos == 0),]
sch_mansoni <- sch_mansoni[-c(which(is.na(sch_mansoni$bio01))),]
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
x = sch_mansoni$bio01,
y = (sch_mansoni$bio10-sch_mansoni$bio11)*pi/(sch_mansoni$bio01*4*sqrt(2)),
intensity = sch_mansoni$percent_pos
)
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_mansoni_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/aestivation/s.haematobium/heat_map")
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/aestivation/s.haematobium/heat_map/july_26.RData")
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < 1] <- 0
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSh(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Extract S.haematobium data set from gntd data set
sch_haematobium_ind <- which(prev_percent$parasite_s == "S. haematobium")
sch_haematobium <- prev_percent[sch_haematobium_ind, ]
sch_haematobium <- sch_haematobium[-which(sch_haematobium$percent_pos == 0),]
sch_haematobium <- sch_haematobium[-c(which(is.na(sch_haematobium$bio01))),]
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
x = sch_haematobium$bio01,
y = (sch_haematobium$bio10-sch_haematobium$bio11)*pi/(sch_haematobium$bio01*4*sqrt(2)),
intensity = sch_haematobium$percent_pos
)
# upload whole africa bioclimate variables
##africa_temperature <- read.csv(file = 'Africa_BIOCLIM.csv')
# Convert bioclimate variables into seasonality
#df_africa_temperature <- data.frame(
##  x = africa_temperature$BIO1,
# y = (africa_temperature$BIO10-africa_temperature$BIO11)*pi/(africa_temperature$BIO1*4*sqrt(2))
#)
# Remove the temperature values out of our interest
#df_africa_temperature_filtered <- df_africa_temperature[!(df_africa_temperature$x > 35 | df_africa_temperature$x <  12), ]
#df_africa_temperature_filtered <- df_africa_temperature_filtered[!(df_africa_temperature_filtered$y > 0.32 | df_africa_temperature_filtered$y < 0), ]
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 3) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = .5) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = "") +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
#S. haematobium
load("/Users/ibrahimaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.haematobium/heat_map/july_23.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_july_20th_ver_R/no_aestivation/s.haematobium/heat_map")
## This script plot heatmap with africa temperature and gntd data set
# Replace entries in out_come_season with 0 if they are greater than 100 or less than 2
out_come_season[out_come_season < 1] <- 0
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
for (i in 1:length(out_come_season[,1])){
for (j in 1:length(out_come_season[1,])){
out_come_season[i,j] <- wormPrevalenceSh(out_come_season[i,j])
}
}
# save the prevalence as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), Prevalence = as.vector(out_come_season))
# upload gntd data
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
# Extract S.haematobium data set from gntd data set
sch_haematobium_ind <- which(prev_percent$parasite_s == "S. haematobium")
sch_haematobium <- prev_percent[sch_haematobium_ind, ]
sch_haematobium <- sch_haematobium[-which(sch_haematobium$percent_pos == 0),]
sch_haematobium <- sch_haematobium[-c(which(is.na(sch_haematobium$bio01))),]
# Convert Bioclimate variables into seasonality
gntd_data <- data.frame(
x = sch_haematobium$bio01,
y = (sch_haematobium$bio10-sch_haematobium$bio11)*pi/(sch_haematobium$bio01*4*sqrt(2)),
intensity = sch_haematobium$percent_pos
)
library(ggplot2)
library(dplyr)
# Your data frame (df) and gntd_data should be defined here
# Create a new variable for coloring
df <- df %>%
mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = "", #expression(paste("Mean annual temperature (", degree, "C)")),
y = expression(paste("Seasonality  ", (epsilon))),
title = expression(italic("S. haematobium"))) +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
# Print the plot
pdf(file = "bio21_heat_map_haematobium_distribution_seasonality.pdf", width = 8, height = 5)
par(mar = c(6, 6, 6, 1), xpd = TRUE)
ggplot(df, aes(x = x, y = y)) +
geom_point(aes(colour = Prev.), size = 1, shape = 15, alpha = 1) +  # Adjusted alpha for transparency
geom_point(data = gntd_data, aes(x = x, y = y), size = 0.1, alpha = 5, col = "black") +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0, na.value = "#D3D3D3") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
labs(x = "", #expression(paste("Mean annual temperature (", degree, "C)")),
y = "", #expression(paste("Seasonality  ", (epsilon))),
title = expression(italic("S. haematobium"))) +
theme(axis.text = element_text(size = 20, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5))
dev.off()
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/no_aestivation/s.haematobium/heat_map/no_aestivation_august_1st.RData")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/no_aestivation/s.haematobium/heat_map")
## This script plots a heatmap with Africa temperature and GNTD dataset
# Replace small values with zero
out_come_season[out_come_season < .3] <- 0
# Prevalence function for S. haematobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358 * log(M) - 3.253653)
p <- 1 - (1 + M / k)^(-k)
return(p)
}
# Apply prevalence function to outcome matrix
for (i in 1:nrow(out_come_season)) {
for (j in 1:ncol(out_come_season)) {
out_come_season[i, j] <- wormPrevalenceSh(out_come_season[i, j])
}
}
# Convert to data frame for plotting
df <- data.frame(x = as.vector(temp_matrix),
y = as.vector(epsilon_matrix),
Prevalence = as.vector(out_come_season))
# Define temperature and seasonality ranges
min_tem <- 14; max_tem <- 31; min_eps <- 0.02; max_eps <- 0.25
temperature_step <- 0.5; epsilon_step <- 0.02
temperatures <- seq(min_tem, max_tem, by = temperature_step)
epsilons <- seq(min_eps, max_eps, by = epsilon_step)
# Load GNTD data
prev_percent <- read.csv('gntd_vars_all.csv')
sch_haematobium <- subset(prev_percent, parasite_s == "S. haematobium" &
percent_pos != 0 & !is.na(bio01))
# Convert bioclimate variables to seasonality
gntd_data <- data.frame(
MAT = sch_haematobium$bio01,
Epsilon = (sch_haematobium$bio10 - sch_haematobium$bio11) * pi /
(sch_haematobium$bio01 * 4 * sqrt(2)),
Prevalence = sch_haematobium$percent_pos / 100
)
# Pre-allocate results matrix
new_gntd_data <- matrix(NA, nrow = length(epsilons), ncol = length(temperatures))
# Bin and compute median prevalence
for (i in seq_along(temperatures)) {
temp_min <- temperatures[i]
temp_max <- temp_min + temperature_step
index_mat <- gntd_data$MAT > temp_min & gntd_data$MAT <= temp_max
for (j in seq_along(epsilons)) {
eps_min <- epsilons[j]
eps_max <- eps_min + epsilon_step
index_eps <- gntd_data$Epsilon > eps_min & gntd_data$Epsilon <= eps_max
combined_index <- index_mat & index_eps
new_gntd_data[j, i] <- quantile(gntd_data$Prevalence[combined_index], 0.5, na.rm = TRUE)
}
}
# Replace NA with zero
new_gntd_data[is.na(new_gntd_data)] <- 0
# Convert matrix to data frame
new_gntd_data_fram <- data.frame(
MAT = rep(temperatures, times = nrow(new_gntd_data)),
Epsilon = rep(epsilons, each = ncol(new_gntd_data)),
intensity = as.vector(t(new_gntd_data))
)
new_gntd_data_fram <- new_gntd_data_fram[new_gntd_data_fram$intensity != 0, ]
# Plotting
library(ggplot2); library(dplyr)
# Add NA for zero prevalence
df <- df %>% mutate(Prev. = ifelse(Prevalence == 0, NA, Prevalence))
# Create heatmap
pdf("bio21_heat_map_haematobium.pdf", width = 8, height = 5)
ggplot() +
geom_point(data = df, aes(x = x, y = y, colour = Prev.), size = 1.25, shape = 15) +
scale_colour_gradient2(low = "white", mid = "yellow", high = "red",
midpoint = median(df$Prev., na.rm = TRUE),
na.value = "#AED6F1", name = "Simulation Prev.") +
geom_point(data = new_gntd_data_fram, aes(x = MAT, y = Epsilon, fill = intensity),
size = 2, alpha = .5, shape = 16, color = "black") +
scale_fill_gradient2(low = "white", high = "black", midpoint = .5, name = "GNTD Data Prev.") +
guides(colour = guide_colourbar(order = 1), fill = guide_colourbar(order = 2)) +
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 20, color = "black"),
plot.title = element_text(size = 20, face = "italic", hjust = 0.5),
legend.text = element_text(size = 15), legend.title = element_text(size = 15)) +
labs(x = "", y = "",
title = expression(paste(italic(S.), " ", italic(haematobium))))
dev.off()
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.haematobium/heat_map")
