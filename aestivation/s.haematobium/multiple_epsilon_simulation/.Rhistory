scale_fill_gradient2(low = "yellow", mid = "white", high = "red", midpoint = 0, na.value = NA
) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.), " ", italic(haematobium))),
fill = "Prevalence Diff.") +  # Add title and color legend title
theme_void() +
coord_sf(ylim = c(-35, max(africa_map$lat))) +
guides(fill = guide_colorbar(barwidth = unit(10, "lines"), title.position = "top",
title.hjust = 0.5, ticks.colour = "black", frame.colour = "black")) +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
plot.background = element_rect(fill = "white", color = NA),
legend.position = c(0.225, 0.4),
legend.direction = "horizontal",
legend.text = element_text(size = 15),
legend.title = element_text(size = 15)) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_cons_temp),
xmin = -27.5, xmax = -10,  # Adjust these values for positioning
ymin = -40, ymax =-25   # Adjust these values for positioning
) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_vary_temp),
xmin = -7.5, xmax = 10,  # Adjust these values for positioning
ymin = -40, ymax = -25  # Adjust these values for positioning
)
# Plot the map with intensity of color based on value
pdf(file = "s_heamatobium_africa_prevalence_difference.pdf", width = 8, height = 8)
print(main_plot)
dev.off()
df_1 <- read.csv(file = 'time_series_1000.csv')
setwd("~/Downloads")
df_1 <- read.csv(file = 'time_series_1000.csv')
df_2 <- read.csv(file = 'time_series_1500.csv')
df_3 <- read.csv(file = 'time_series_2000.csv')
df_4 <- read.csv(file = 'time_series_2500.csv')
df_5 <- read.csv(file = 'time_series_3000.csv')
df_6 <- read.csv(file = 'time_series_4000.csv')
df_7 <- read.csv(file = 'time_series_5000.csv')
df_8 <- read.csv(file = 'time_series_6000.csv')
df_9 <- read.csv(file = 'time_series_7000.csv')
df_10 <- read.csv(file = 'time_series_8000.csv')
df_11 <- read.csv(file = 'time_series_9000.csv')
df_12 <- read.csv(file = 'time_series_10000.csv')
df_13 <- read.csv(file = 'time_series_11000.csv')
df_14 <- read.csv(file = 'time_series_12000.csv')
df_15 <- read.csv(file = 'time_series_13000.csv')
df_16 <- read.csv(file = 'time_series_14000.csv')
df_17 <- read.csv(file = 'time_series_14630.csv')
combine_df <- bind_rows(df_1, df_2, df_3, df_4, df_5, df_6, df_7,
df_8, df_9, df_10, df_11, df_13, df_14,
df_15, df_16, df_17)
# Save as CSV with specified column names
write.csv(combine_df,"Sh_simulation_africa_time_series_mpb.csv", row.names = FALSE)
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_nov_21st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon")
## This code is to plot generate the data frame for constant temperature
#clear environment
rm(list = ls())
# Load required libraries
library(maps)
library(ggplot2)
library(sf)
library(tidyr)
library(stars)
library(sfheaders)
library(scales)
#load(file ="december_3.RData")
load(file ="august_2.RData")
prevalence_africa <- read.csv(file = 'Sh_simulation_africa_time_series_mpb.csv')
prevalence_africa$constant_temp_simulation <- numeric(length(prevalence_africa$Prevalence))
#for (i in 1:length(temperature)){
#  index_mat <- which(prevalence_africa$MAT <= temperature[i] + 0.1 & prevalence_africa$MAT > temperature[i])
#  prevalence_africa$constant_temp_simulation[index_mat] <- out_come_season[1, i]
#}
for (i in 1:length(temperature)){
index_mat <- which(prevalence_africa$MAT <= temperature[i] + 0.1 & prevalence_africa$MAT > temperature[i])
prevalence_africa$constant_temp_simulation[index_mat] <- outputs_1_mpb[i]
}
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
prevalence_africa$constant_temp_simulation <- wormPrevalenceSh(prevalence_africa$constant_temp_simulation)
# Get world map data
world_map <- map_data("world")
# Filter data for Africa
africa_map <- subset(world_map, region %in% c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Western Sahara",
"Burundi", "Cameroon", "Cape Verde", "Central African Republic",
"Chad", "Comoros", "Democratic Republic of the Congo", "Republic of Congo",
"Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini",
"Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau",
"Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique",
"Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome and Principe",
"Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa",
"South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda",
"Zambia", "Zimbabwe"))
africa_poly <- st_union(sfheaders::sf_polygon(africa_map, x = "long", y = "lat", polygon_id = "group"))
africa_poly <- st_set_crs(africa_poly, 4326)
# upload prevalence data
df_africa_mask <- read.csv(file = 'africa_mask_v1.csv')
df_africa_mask <- replace_na(complete(df_africa_mask, lon, lat), list(grid_code = 0))
df_africa_constant <- data.frame(Longitude = prevalence_africa$longitude, Latitude = prevalence_africa$latitude,
constant_temp_simulation = prevalence_africa$constant_temp_simulation)
df_africa_seasonal <- data.frame(Longitude = prevalence_africa$longitude, Latitude = prevalence_africa$latitude,
seasonal_temperature_simulation = prevalence_africa$Prevalence)
rast_constant <- st_set_crs(st_as_stars(df_africa_constant, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast_constant)
rast_constant$constant_temp_simulation[mask_rast$grid_code == 1] <- NA
rast_constant <- rast_constant[africa_poly]
rast_seasonal <- st_set_crs(st_as_stars(df_africa_seasonal, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast_seasonal)
rast_seasonal$seasonal_temperature_simulation[mask_rast$grid_code == 1] <- NA
rast_seasonal <- rast_seasonal[africa_poly]
rast <- rast_seasonal
rast$prevalence <- rast_constant$constant_temp_simulation - rast_seasonal$seasonal_temperature_simulation
# Load the R environment from the .RData file
# Read the CSV file
my_data <- read.csv("my_vector.csv")
daily_temps <- as.numeric(my_data)
# Create the inset plot
inset_plot_vary_temp <- ggplot(data.frame(1:length(daily_temps), daily_temps), aes(x = 1:length(daily_temps), y = daily_temps)) +
geom_line(color = "blue") +
theme_classic() +
labs(title = "", x = "Days", y = "Temp.") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10),
plot.margin = margin(0, 0, 0, 0)) # Remove margins for tight placement
# Create the inset plot
inset_plot_cons_temp <- ggplot(data.frame(1:length(daily_temps), daily_temps), aes(x = 1:length(daily_temps), y = mean(daily_temps))) +
geom_line(color = "blue") +
theme_classic() +
labs(title = " ", x = "Days", y = "Temp.") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10),
plot.margin = margin(0, 0, 0, 0)) +
scale_y_continuous(labels = scales::number_format(accuracy = 1))# Remove margins for tight placement
# Create the main plot and store it in an object
main_plot <- ggplot() +
geom_sf(data = africa_poly, fill = "#AED6F1", color = "#AED6F1", linewidth = 10) +
geom_sf(data = africa_poly, fill = "grey40") +
geom_stars(aes(fill = prevalence), data = rast, alpha = 1) +
scale_fill_gradient2(low = "yellow", mid = "white", high = "red", midpoint = 0, na.value = NA
) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.), " ", italic(haematobium))),
fill = "Prevalence Diff.") +  # Add title and color legend title
theme_void() +
coord_sf(ylim = c(-35, max(africa_map$lat))) +
guides(fill = guide_colorbar(barwidth = unit(10, "lines"), title.position = "top",
title.hjust = 0.5, ticks.colour = "black", frame.colour = "black")) +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
plot.background = element_rect(fill = "white", color = NA),
legend.position = c(0.225, 0.4),
legend.direction = "horizontal",
legend.text = element_text(size = 15),
legend.title = element_text(size = 15)) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_cons_temp),
xmin = -27.5, xmax = -10,  # Adjust these values for positioning
ymin = -40, ymax =-25   # Adjust these values for positioning
) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_vary_temp),
xmin = -7.5, xmax = 10,  # Adjust these values for positioning
ymin = -40, ymax = -25  # Adjust these values for positioning
)
# Plot the map with intensity of color based on value
pdf(file = "s_heamatobium_africa_prevalence_difference.pdf", width = 8, height = 8)
print(main_plot)
dev.off()
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_nov_21st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon")
setwd("~/Downloads")
df_1 <- read.csv(file = 'time_series_1000.csv')
df_2 <- read.csv(file = 'time_series_1500.csv')
df_3 <- read.csv(file = 'time_series_2000.csv')
df_4 <- read.csv(file = 'time_series_2500.csv')
df_5 <- read.csv(file = 'time_series_3000.csv')
df_6 <- read.csv(file = 'time_series_4000.csv')
df_7 <- read.csv(file = 'time_series_5000.csv')
df_8 <- read.csv(file = 'time_series_6000.csv')
df_9 <- read.csv(file = 'time_series_7000.csv')
df_10 <- read.csv(file = 'time_series_8000.csv')
df_11 <- read.csv(file = 'time_series_9000.csv')
df_12 <- read.csv(file = 'time_series_10000.csv')
df_13 <- read.csv(file = 'time_series_11000.csv')
df_14 <- read.csv(file = 'time_series_12000.csv')
df_15 <- read.csv(file = 'time_series_13000.csv')
df_16 <- read.csv(file = 'time_series_14000.csv')
df_17 <- read.csv(file = 'time_series_14630.csv')
combine_df <- bind_rows(df_1, df_2, df_3, df_4, df_5, df_6, df_7,
df_8, df_9, df_10, df_11, df_12, df_13, df_14,
df_15, df_16, df_17)
# Save as CSV with specified column names
write.csv(combine_df,"Sh_simulation_africa_time_series_mpb.csv", row.names = FALSE)
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_nov_21st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon")
## This code is to plot generate the data frame for constant temperature
#clear environment
rm(list = ls())
# Load required libraries
library(maps)
library(ggplot2)
library(sf)
library(tidyr)
library(stars)
library(sfheaders)
library(scales)
#load(file ="december_3.RData")
load(file ="august_2.RData")
prevalence_africa <- read.csv(file = 'Sh_simulation_africa_time_series_mpb.csv')
prevalence_africa$constant_temp_simulation <- numeric(length(prevalence_africa$Prevalence))
#for (i in 1:length(temperature)){
#  index_mat <- which(prevalence_africa$MAT <= temperature[i] + 0.1 & prevalence_africa$MAT > temperature[i])
#  prevalence_africa$constant_temp_simulation[index_mat] <- out_come_season[1, i]
#}
for (i in 1:length(temperature)){
index_mat <- which(prevalence_africa$MAT <= temperature[i] + 0.1 & prevalence_africa$MAT > temperature[i])
prevalence_africa$constant_temp_simulation[index_mat] <- outputs_1_mpb[i]
}
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
prevalence_africa$constant_temp_simulation <- wormPrevalenceSh(prevalence_africa$constant_temp_simulation)
# Get world map data
world_map <- map_data("world")
# Filter data for Africa
africa_map <- subset(world_map, region %in% c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Western Sahara",
"Burundi", "Cameroon", "Cape Verde", "Central African Republic",
"Chad", "Comoros", "Democratic Republic of the Congo", "Republic of Congo",
"Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini",
"Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau",
"Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique",
"Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome and Principe",
"Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa",
"South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda",
"Zambia", "Zimbabwe"))
africa_poly <- st_union(sfheaders::sf_polygon(africa_map, x = "long", y = "lat", polygon_id = "group"))
africa_poly <- st_set_crs(africa_poly, 4326)
# upload prevalence data
df_africa_mask <- read.csv(file = 'africa_mask_v1.csv')
df_africa_mask <- replace_na(complete(df_africa_mask, lon, lat), list(grid_code = 0))
df_africa_constant <- data.frame(Longitude = prevalence_africa$longitude, Latitude = prevalence_africa$latitude,
constant_temp_simulation = prevalence_africa$constant_temp_simulation)
df_africa_seasonal <- data.frame(Longitude = prevalence_africa$longitude, Latitude = prevalence_africa$latitude,
seasonal_temperature_simulation = prevalence_africa$Prevalence)
rast_constant <- st_set_crs(st_as_stars(df_africa_constant, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast_constant)
rast_constant$constant_temp_simulation[mask_rast$grid_code == 1] <- NA
rast_constant <- rast_constant[africa_poly]
rast_seasonal <- st_set_crs(st_as_stars(df_africa_seasonal, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast_seasonal)
rast_seasonal$seasonal_temperature_simulation[mask_rast$grid_code == 1] <- NA
rast_seasonal <- rast_seasonal[africa_poly]
rast <- rast_seasonal
rast$prevalence <- rast_constant$constant_temp_simulation - rast_seasonal$seasonal_temperature_simulation
# Load the R environment from the .RData file
# Read the CSV file
my_data <- read.csv("my_vector.csv")
daily_temps <- as.numeric(my_data)
# Create the inset plot
inset_plot_vary_temp <- ggplot(data.frame(1:length(daily_temps), daily_temps), aes(x = 1:length(daily_temps), y = daily_temps)) +
geom_line(color = "blue") +
theme_classic() +
labs(title = "", x = "Days", y = "Temp.") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10),
plot.margin = margin(0, 0, 0, 0)) # Remove margins for tight placement
# Create the inset plot
inset_plot_cons_temp <- ggplot(data.frame(1:length(daily_temps), daily_temps), aes(x = 1:length(daily_temps), y = mean(daily_temps))) +
geom_line(color = "blue") +
theme_classic() +
labs(title = " ", x = "Days", y = "Temp.") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10),
plot.margin = margin(0, 0, 0, 0)) +
scale_y_continuous(labels = scales::number_format(accuracy = 1))# Remove margins for tight placement
# Create the main plot and store it in an object
main_plot <- ggplot() +
geom_sf(data = africa_poly, fill = "#AED6F1", color = "#AED6F1", linewidth = 10) +
geom_sf(data = africa_poly, fill = "grey40") +
geom_stars(aes(fill = prevalence), data = rast, alpha = 1) +
scale_fill_gradient2(low = "yellow", mid = "white", high = "red", midpoint = 0, na.value = NA
) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.), " ", italic(haematobium))),
fill = "Prevalence Diff.") +  # Add title and color legend title
theme_void() +
coord_sf(ylim = c(-35, max(africa_map$lat))) +
guides(fill = guide_colorbar(barwidth = unit(10, "lines"), title.position = "top",
title.hjust = 0.5, ticks.colour = "black", frame.colour = "black")) +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
plot.background = element_rect(fill = "white", color = NA),
legend.position = c(0.225, 0.4),
legend.direction = "horizontal",
legend.text = element_text(size = 15),
legend.title = element_text(size = 15)) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_cons_temp),
xmin = -27.5, xmax = -10,  # Adjust these values for positioning
ymin = -40, ymax =-25   # Adjust these values for positioning
) + #+  # Center plot title
annotation_custom(
grob = ggplotGrob(inset_plot_vary_temp),
xmin = -7.5, xmax = 10,  # Adjust these values for positioning
ymin = -40, ymax = -25  # Adjust these values for positioning
)
# Plot the map with intensity of color based on value
pdf(file = "s_heamatobium_africa_prevalence_difference.pdf", width = 8, height = 8)
print(main_plot)
dev.off()
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/adaptive_model/2025_March_7th_ver_R/aestivation/s.haematobium/multiple_epsilon_simulation")
# This  script is analyzing the prevalence and MPB in human in a seasonal environment
# Mainly we want to see the effect of seasonality on the prevalence and
# mean burden of parasite and the optimal temperature.
############### we run the model with multiply many mean temperature and three different seasonality
#We have to runt he model for large epsilon values and we need to try with different seasonality values.
rm(list = ls())
# upload the necessary packages
library(foreach)
library(doParallel)
# run the parameter script
source("par_set_haematobium.R")
# We improve the previous model with estivation function which is as follow
# set the temperature of half saturation for snails estivation function at high temperatures
est_temp <- 23
# set the rate of snails move to the estivation stages
est_rate <- 0.065
# Set the steepness of estivation function for hot temperature
steepness <-  0.7
# Define a piecewise function for vector input
in_est_function <- function(x) {
y <- est_rate/(1+exp(-steepness*(x-est_temp)))
return(y)
}
# Define a piecewise function for vector input
out_est_function <- function(x) {
y <- est_rate/(1+exp(steepness*(x-est_temp)))
return(y)
}
# The reduction of mortality due to estivation
re_est <- 20
re_est_i <- 2
# if we want to calculate the average number of mated pair of worm we will be using
phiSh <- function(M) {
# Define the function to be integrated
k <- exp(0.5186358*log(M) - 3.253653)
integrand <- function(x) {
(1 - cos(x)) / ((1 + (M / (M + k)) * cos(x))^(1 + k))
}
# Perform the integration
integral_result <- integrate(integrand, lower = 0, upper = 2 * pi)
# Calculate the prevalence
p <- 1 - (((k / (M + k))^(1 + k))/ (2 * pi)) * integral_result$value
return(p)
}
# Set minimum temperature
min_tem <- 10;
# Set maximum temperature
max_tem <- 32;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, 0.1);
# number of year to run
year <- 40
# Set time span for model running
step_size <- 0.1
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space for temperature
sample_parameters <- seq(from = 0, to = 365*year+1, by = 1)
#seasonality value
sesonality <- c(0, 0.1, 0.25)
# create an empty matrix to record the outcome of simulations
out_come_season <- matrix(nrow = length(sesonality), ncol = length(temperature))
# create empty matrix for the parameters
preds_mu_i <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_nu_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu_m <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_sigma_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_nu_c <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu_c <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_delta_e <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_beta_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_beta_h <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_in_estivation <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_out_estivation <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
# start run the model for each seasonality value
for(epsilon in 1:length(sesonality)){
# run the model for each temperature and corresponding seasonal value
for(j in 1:length(temperature)){
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + sesonality[epsilon] * sin(2 * pi * sample_parameters/365)))
# calculate the parameters values for each corresponding temperature
preds_nu_s[j,] <- ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0)
preds_mu[j,] <- ifelse(seasonal_temperature$temp <= 33,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0))
preds_mu_m[j,] <- ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0)
preds_sigma_s[j,] <- ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0)
preds_mu_i[j,] <- ifelse(seasonal_temperature$temp <= 33.5,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0))
preds_nu_c[j,] <- ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0)
preds_mu_c[j,] <- ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0)
preds_delta_e[j,] <- ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0)
preds_beta_s[j,] <- ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0)
preds_beta_h[j,] <- ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0)
preds_in_estivation[j,] <- in_est_function(seasonal_temperature$temp)
preds_out_estivation[j,] <- out_est_function(seasonal_temperature$temp)
}
# run the model for each temperature (all parameter values )
solution_for_temp <- function(index){
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = preds_nu_s[index,])
mu_afun <- approxfun(x = sample_parameters, y = preds_mu[index,])
mu_m_afun <- approxfun(x = sample_parameters, y = preds_mu_m[index,])
sigma_s_afun <- approxfun(x = sample_parameters, y = preds_sigma_s[index,])
mu_i_afun <- approxfun(x = sample_parameters, y = preds_mu_i[index, ])
nu_c_afun <- approxfun(x = sample_parameters, y = preds_nu_c[index,])
mu_c_afun <- approxfun(x = sample_parameters, y = preds_mu_c[index,])
delta_e_afun <- approxfun(x = sample_parameters, y = preds_delta_e[index,])
beta_s_afun <- approxfun(x = sample_parameters, y = preds_beta_s[index,])
beta_h_afun <- approxfun(x = sample_parameters, y = preds_beta_h[index,])
in_estivation_afun <- approxfun(x = sample_parameters, y = preds_in_estivation[index,])
out_estivation_afun <- approxfun(x = sample_parameters, y = preds_out_estivation[index,])
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
in_est <- in_estivation_afun(t)
out_est <- out_estivation_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S - in_est * S + out_est * SE
dSE <- in_est * S - mu/re_est * SE - out_est * SE
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E - in_est*E + out_est * EE
dEE <- in_est * E - mu_i/re_est_i * EE - out_est * EE
dI <- sigma_s * E - mu_i * I - in_est*I + out_est * IE
dIE <- in_est * I - mu_i/re_est_i * IE - out_est * IE
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, SE = dSE, E = dE, EE = dEE, I = dI, IE = dIE, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value. These might be changed later because they are prevalence dependent.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2, SE = 0,  E = 1285, EE = 0, I = 2340, IE = 0, P = 1, P_m = 45)
## solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_put <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),9])
return(out_put)
}
#Setup backend to use many processors
totalCores = detectCores()
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
# Parallel loop using %dopar%
out_come_for_each_temperature <- foreach(k = 1:length(temperature), .combine = c) %dopar% {
result <- solution_for_temp(k)
return(result)
}
#Stop cluster
stopCluster(cluster)
out_come_season[epsilon, ] <- out_come_for_each_temperature
}
out_come_season
