preds_nu_c[j,] <- ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0)
preds_mu_c[j,] <- ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0)
preds_delta_e[j,] <- ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0)
preds_beta_s[j,] <- ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0)
preds_beta_h[j,] <- ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0)
}
solution_for_temp <- function(index){
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = preds_nu_s[index,])
mu_afun <- approxfun(x = sample_parameters, y = preds_mu[index,])
mu_m_afun <- approxfun(x = sample_parameters, y = preds_mu_m[index,])
sigma_s_afun <- approxfun(x = sample_parameters, y = preds_sigma_s[index,])
mu_i_afun <- approxfun(x = sample_parameters, y = preds_mu_i[index, ])
nu_c_afun <- approxfun(x = sample_parameters, y = preds_nu_c[index,])
mu_c_afun <- approxfun(x = sample_parameters, y = preds_mu_c[index,])
delta_e_afun <- approxfun(x = sample_parameters, y = preds_delta_e[index,])
beta_s_afun <- approxfun(x = sample_parameters, y = preds_beta_s[index,])
beta_h_afun <- approxfun(x = sample_parameters, y = preds_beta_h[index,])
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * phiSm(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 3, P_m = 130)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_put <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]),6])
return(out_put)
}
#Setup backend to use many processors
totalCores = detectCores()
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
# Parallel loop using %dopar%
out_come_for_each_temperature <- foreach(k = 1:length(temperature), .combine = c) %dopar% {
result <- solution_for_temp(k)
return(result)
}
#Stop cluster
stopCluster(cluster)
out_come_season[epsilon, ] <- out_come_for_each_temperature
}
# Repeat the column n times
epsilon_matrix <- matrix(rep(seasonality, length(temperature)), nrow = length(seasonality), byrow = FALSE)
temp_matrix <- matrix(rep(temperature, length(seasonality)), nrow = length(seasonality), byrow = TRUE)
# save the mean parasite burden as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), MPB = as.vector(out_come_season))
# upload th library
library(ggplot2)
# Plot the results and print
pdf(file="heat_map.pdf", width = 8, height = 5)
out_come_season
out_come_season[1,]
out_come_season[29,]
out_come_season[28,]
out_come_season[12,]
save.image("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.mansoni/heat_map/august_1st.RData")
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon/run_with_multiple_epsilon.R")
out_come_season
# Plot mean parasite burden for three different seasonality
pdf(file = "mpb_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season_mpb[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 105))
lines(temperature, out_come_season_mpb[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season_mpb[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#legend(x = 12, y = 103,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 16.5, y = 103, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 12, y = 98,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 16.5, y = 98, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 12, y = 93,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 16.5, y = 93, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Mean parasite burden", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSh(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSh(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSh(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = temperature[which.max(out_come_season[1,])]+1.5, y = max(out_come_season[1,])+0.02, labels = '(23.1, 0.89)', col = "blue", cex = .9)
#text(x = temperature[which.max(outputs_1)], y = 0.02, labels = temperature[which.max(outputs_1)], col = "blue", cex = 1)
text(x = temperature[which.max(out_come_season[2,])]+1.7, y = max(out_come_season[2,])+0.015, labels = '(22.8, 0.85)', col = "orange", cex = .9)
#text(x = temperature[which.max(outputs_2)], y = 0.02, labels = temperature[which.max(outputs_2)], col = "orange", cex = 1)
text(x = temperature[which.max(out_come_season[3,])]+2, y = max(out_come_season[3,])+0.02, labels = '(20.9, 0.63)', col = "red", cex = .9)
#text(x = temperature[which.max(outputs_3)], y = 0.02, labels = temperature[which.max(outputs_3)], col = "red", cex = 1)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, typ = "l", lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, type = "l", lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
out_come_season_mpb
out_come_season <- out_come_season_mpb
# Plot mean parasite burden for three different seasonality
pdf(file = "mpb_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season_mpb[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 105))
lines(temperature, out_come_season_mpb[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season_mpb[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#legend(x = 12, y = 103,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 16.5, y = 103, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 12, y = 98,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 16.5, y = 98, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 12, y = 93,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 16.5, y = 93, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Mean parasite burden", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSh(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSh(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSh(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = temperature[which.max(out_come_season[1,])]+1.5, y = max(out_come_season[1,])+0.02, labels = '(23.1, 0.89)', col = "blue", cex = .9)
#text(x = temperature[which.max(outputs_1)], y = 0.02, labels = temperature[which.max(outputs_1)], col = "blue", cex = 1)
text(x = temperature[which.max(out_come_season[2,])]+1.7, y = max(out_come_season[2,])+0.015, labels = '(22.8, 0.85)', col = "orange", cex = .9)
#text(x = temperature[which.max(outputs_2)], y = 0.02, labels = temperature[which.max(outputs_2)], col = "orange", cex = 1)
text(x = temperature[which.max(out_come_season[3,])]+2, y = max(out_come_season[3,])+0.02, labels = '(20.9, 0.63)', col = "red", cex = .9)
#text(x = temperature[which.max(outputs_3)], y = 0.02, labels = temperature[which.max(outputs_3)], col = "red", cex = 1)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, typ = "l", lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, type = "l", lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon")
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSh(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSh(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSh(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = temperature[which.max(out_come_season[1,])]+1.5, y = max(out_come_season[1,])+0.02, labels = '(23.1, 0.89)', col = "blue", cex = .9)
#text(x = temperature[which.max(outputs_1)], y = 0.02, labels = temperature[which.max(outputs_1)], col = "blue", cex = 1)
text(x = temperature[which.max(out_come_season[2,])]+1.7, y = max(out_come_season[2,])+0.015, labels = '(22.8, 0.85)', col = "orange", cex = .9)
#text(x = temperature[which.max(outputs_2)], y = 0.02, labels = temperature[which.max(outputs_2)], col = "orange", cex = 1)
text(x = temperature[which.max(out_come_season[3,])]+2, y = max(out_come_season[3,])+0.02, labels = '(20.9, 0.63)', col = "red", cex = .9)
#text(x = temperature[which.max(outputs_3)], y = 0.02, labels = temperature[which.max(outputs_3)], col = "red", cex = 1)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, typ = "l", lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, type = "l", lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
dev.off()
dev.off()
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSh(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSh(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSh(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = temperature[which.max(out_come_season[1,])]+1.5, y = max(out_come_season[1,])+0.02, labels = '(23.1, 0.89)', col = "blue", cex = .9)
#text(x = temperature[which.max(outputs_1)], y = 0.02, labels = temperature[which.max(outputs_1)], col = "blue", cex = 1)
text(x = temperature[which.max(out_come_season[2,])]+1.7, y = max(out_come_season[2,])+0.015, labels = '(22.8, 0.85)', col = "orange", cex = .9)
#text(x = temperature[which.max(outputs_2)], y = 0.02, labels = temperature[which.max(outputs_2)], col = "orange", cex = 1)
text(x = temperature[which.max(out_come_season[3,])]+2, y = max(out_come_season[3,])+0.02, labels = '(20.9, 0.63)', col = "red", cex = .9)
#text(x = temperature[which.max(outputs_3)], y = 0.02, labels = temperature[which.max(outputs_3)], col = "red", cex = 1)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, typ = "l", lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, type = "l", lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
out_come_season_mpb
out_come_season <- out_come_season_mpb
# Plot mean parasite burden for three different seasonality
pdf(file = "mpb_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season_mpb[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 105))
lines(temperature, out_come_season_mpb[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season_mpb[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#legend(x = 12, y = 103,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 16.5, y = 103, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 12, y = 98,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 16.5, y = 98, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 12, y = 93,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 16.5, y = 93, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Mean parasite burden", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
# When using estimated clumper parameter for S. heamatobium
wormPrevalenceSh <- function(M) {
k <- exp(0.5186358*log(M) - 3.253653)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
out_come_season[1, ] <- wormPrevalenceSh(out_come_season[1,])
out_come_season[2, ] <- wormPrevalenceSh(out_come_season[2,])
out_come_season[3, ] <- wormPrevalenceSh(out_come_season[3,])
# Plot mean parasite burden for three different seasonality
pdf(file = "prevalence_with_estivation.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, out_come_season[1,], col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
main = "", ylim = c(0, 1))
lines(temperature, out_come_season[2,], col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, out_come_season[3,], col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#lines(temperature, out_come_season[4,], col = 4, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = temperature[which.max(out_come_season[1,])]+1.5, y = max(out_come_season[1,])+0.02, labels = '(23.1, 0.89)', col = "blue", cex = .9)
#text(x = temperature[which.max(outputs_1)], y = 0.02, labels = temperature[which.max(outputs_1)], col = "blue", cex = 1)
text(x = temperature[which.max(out_come_season[2,])]+1.7, y = max(out_come_season[2,])+0.015, labels = '(22.8, 0.85)', col = "orange", cex = .9)
#text(x = temperature[which.max(outputs_2)], y = 0.02, labels = temperature[which.max(outputs_2)], col = "orange", cex = 1)
text(x = temperature[which.max(out_come_season[3,])]+2, y = max(out_come_season[3,])+0.02, labels = '(20.9, 0.63)', col = "red", cex = .9)
#text(x = temperature[which.max(outputs_3)], y = 0.02, labels = temperature[which.max(outputs_3)], col = "red", cex = 1)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(out_come_season[1,]), which.max(out_come_season[2,]), which.max(out_come_season[3,]))
arrows(x0 = temperature[points_to_connect[1]], y0 = out_come_season[1,points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = out_come_season[2,points_to_connect[2]],
col = "black", length = 0.1, typ = "l", lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = out_come_season[2,points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = out_come_season[3,points_to_connect[3]],
col = "black", length = 0.1, type = "l", lwd = 3)
mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
#mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S.haematobium)), side = 3, line = 4, cex = 2)
dev.off()
save.image("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/mpb_with_multiple_epsilon/august_1.RData")
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.haematobium/model_run_with_different_seasonality")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.haematobium/model_run_with_different_seasonality/seasonal_mod_run.R")
outputs_1_mpb
# This  script simulates the mean parasite burden (MPB) with seasonal temperature
# We want to see the effect of seasonality on MPB and the optimal temperature.
############### we run the model with multiply many mean temperature and three different seasonality
rm(list = ls())
library(foreach)
library(doParallel)
# run the parameter script
source("par_set_haematobium.R")
# if we want to calculate the average number of mated pair of worm we will be using
phiSh <- function(M) {
# Define the function to be integrated
k <- exp(0.5186358*log(M) - 3.253653)
integrand <- function(x) {
(1 - cos(x)) / ((1 + (M / (M + k)) * cos(x))^(1 + k))
}
# Perform the integration
integral_result <- integrate(integrand, lower = 0, upper = 2 * pi)
# Calculate the prevalence
p <- 1 - (((k / (M + k))^(1 + k))/ (2 * pi)) * integral_result$value
return(p)
}
# Set minimum temperature
min_tem <- 12;
# Set maximum temperature
max_tem <- 32;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, 0.1);
# Set a matrix to record the outputs
out_puts <- c()
#create a function to run the model with seasonality
seaonality_effect <- function(epsilon){
# For loop to run the model for each temperature
for (j in 1:length(temperature)){
# Set the number of year to run the model
year <- 40
#Set time span for model running
step_size = 0.1;
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space of parameters for each day
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 33,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 33.5,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h *  phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h *  phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 1, P_m = 45)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_puts[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]), 6])
}
return(out_puts)
}
#Run the model with different seasonality
outputs_1_mpb <- seaonality_effect(0)
outputs_2_mpb <- seaonality_effect(0.1)
outputs_3_mpb <- seaonality_effect(0.25)
outputs_3_mpb
outputs_2_mpb
#create a function to run the model with seasonality
seaonality_effect <- function(epsilon){
# For loop to run the model for each temperature
for (j in 1:length(temperature)){
# Set the number of year to run the model
year <- 40
#Set time span for model running
step_size = 0.01;
run_time <- seq(from = 0, to = 365*year, by = step_size)
#set a sample space of parameters for each day
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 33,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 33.5,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h *  phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h *  phiSh(P_m)*P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 1, P_m = 45)
# solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_puts[j] <- mean(model_outputs[(length(model_outputs[, 1])-5*366/step_size):length(model_outputs[, 1]), 6])
}
return(out_puts)
}
outputs_3_mpb <- seaonality_effect(0.25)
outputs_3
outputs_2
outputs_3_mpb
outputs_2_mpb
save.image("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.haematobium/model_run_with_different_seasonality/august_2.RData")
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_nov_21st_ver_R/no_aestivation/s.haematobium/model_run_with_different_seasonality/august_2.RData")
