return(list(c(S = dS, SE = dSE)))
})
}
time_vary_temp <-  c(25.478, 26.051, 26.433, 27.389, 27.962, 29.108, 29.49, 30.064,  30.828,
29.873, 29.108, 27.197, 27.197, 25.096, 23.185, 21.274, 19.745, 17.834,
17.261, 19.554, 19.172, 20.51, 22.229, 22.229, 22.803, 24.331, 27.771,
30.637, 31.592, 31.975, 32.166, 31.019, 30.446, 29.682, 28.344, 27.197,
25.86,  24.904, 24.14, 23.376, 21.274, 19.172,  18.408, 17.261, 15.924,
18.217, 19.554, 20.51, 22.038, 22.803, 23.758, 24.904, 26.433, 27.197,
27.962, 28.726, 28.344, 29.108, 29.49, 29.49, 29.108, 27.389, 25.096,
23.567, 22.038, 20.318, 19.363, 18.599, 17.834, 16.306, 15.541, 16.879,
18.025, 19.172, 20.318, 21.274, 22.611)
time_temp <- c(11.86,   25.54,   40.13,   54.72,   67.49,   89.38,  111.27,  127.69,  151.40,  169.64,  180.59,  197.00,  213.42,  224.36,  228.01,  235.31,
240.78,  255.37,  264.50,  279.09,  299.15,  326.51,  344.76,  357.52,  379.41,  390.36,  404.95,  410.42,  421.37,  446.91,  472.44,  490.68,
501.63,  516.22,  530.81,  536.29,  543.58,  549.06,  558.18,  569.12,  587.36,  609.25,  616.55,  629.32,  640.26,  651.21, 662.15,  674.92,
684.04,  705.93,  727.82,  753.36,  766.12,  778.89,  789.84,  815.37,  829.97,  844.56,  855.50,  879.22,  890.16,  904.76,  923.00,  935.77,
946.71,  952.18,  964.95,  974.07,  981.37,  995.96, 1008.73, 1019.67, 1037.92, 1052.51, 1063.45, 1078.05, 1086.25)
# make one year seasonal temperature variation
temperature <- 24.5;
epsilon <- 0.2;
m = -30
sample_parameters <- seq(from = 0, to = 1086, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# We plot the the temperature variation over time to see if the epsilon is a good choice
#plot(sample_parameters, seasonal_temperature$temp, type = "l", ylim = c(13, 35))
#points(time_temp, time_vary_temp)
#plot(seasonal_temperature$temp, in_est_function(seasonal_temperature$temp))
abundance_snail_year_1 <- c(0.6, 0.583, 0.717, 0.53, 0.59, 0.59, 0.57, 0.60417, 0.55417, 0.58, 0.383,
0.383, 0.30, 0.35417, 0.33, 0.34583, 0.37083, 0.35, 0.37, 0.37917, 0.42917,
0.43, 0.33, 0.5083, 0.63)
abundance_snail_year_1 <- (10^abundance_snail_year_1-1)*85
abundance_snail_year_2 <- c(0.734579, 0.639252, 0.908411, 0.925233, 0.947663, 1.026168, 0.992523, 0.863551,
0.398130, 0.280373, 0.235514, 0.285981, 0.241121, 0.398130, 0.336448, 0.269158,
0.246728, 0.291588, 0.347663, 0.414953, 0.465420,
0.370093, 0.583177, 0.650467, 0.5214)
abundance_snail_year_2 <- (10^abundance_snail_year_2-1)*85
abundance_snail_year_3 <- c(0.603821656,0.557961783,0.61910828,0.771974522,0.512101911,0.458598726,0.351592357,0.397452229,
0.397452229,0.359235669,0.298089172,0.244585987,0.275159236,0.244585987,0.107006369,0.168152866,
0.221656051,0.259872611,0.443312102,0.542675159,0.565605096,0.557961783,0.557961783,0.687898089,
0.878980892)
abundance_snail_year_3 <- (10^abundance_snail_year_3-1)*85
average_of_three_years <- (abundance_snail_year_1+abundance_snail_year_2+abundance_snail_year_3)/3
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = average_of_three_years[1], SE = max(average_of_three_years)-average_of_three_years[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_one_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14, by = 14), average_of_three_years, col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
###### Run for three years
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14*3, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = abundance_snail_year_1[1], SE = max(abundance_snail_year_1)-abundance_snail_year_1[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_three_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14*3, by = 14), c(abundance_snail_year_1, abundance_snail_year_2, abundance_snail_year_3), col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
mid_temp <- 31
epsilon <- 0.2
year <- 3
sample_parameters <- seq(from = 0, to = 360*year, by = 1)
#set seasonal temperature
temp = mid_temp * (1 + epsilon * sin(2 * pi * (sample_parameters)/360))
#plot(sample_parameters, temp)
#plot(sample_parameters, in_estivation_afun(temp))
#This code estimates the eastivation function with saveral field studies
# Regarding abundance of snails with temperature.
# Clear environmet
rm(list = ls())
library(dplyr)
# We start with seting our eastivation function
# set the temperature of half saturation for snails estivation function at high temperatures
est_temp <- 24
# set the rate of snails move to the estivation stages
est_rate <- .02
# Set the steepness of estivation function for hot temperature
steepness <-  1
# Define a piecewise function for vector input
in_est_function <- function(x) {
y <- est_rate/(1+exp(-steepness*(x-est_temp)))
return(y)
}
# Define a piecewise function for vector input
out_est_function <- function(x) {
y <- est_rate/(1+exp(steepness*(x-est_temp)))
return(y)
}
### we set the model to run
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
in_est <- in_estivation_afun(t)
out_est <- out_estivation_afun(t)
dS <- -in_est * S + out_est * SE
dSE <- in_est * S - out_est * SE
return(list(c(S = dS, SE = dSE)))
})
}
time_vary_temp <-  c(25.478, 26.051, 26.433, 27.389, 27.962, 29.108, 29.49, 30.064,  30.828,
29.873, 29.108, 27.197, 27.197, 25.096, 23.185, 21.274, 19.745, 17.834,
17.261, 19.554, 19.172, 20.51, 22.229, 22.229, 22.803, 24.331, 27.771,
30.637, 31.592, 31.975, 32.166, 31.019, 30.446, 29.682, 28.344, 27.197,
25.86,  24.904, 24.14, 23.376, 21.274, 19.172,  18.408, 17.261, 15.924,
18.217, 19.554, 20.51, 22.038, 22.803, 23.758, 24.904, 26.433, 27.197,
27.962, 28.726, 28.344, 29.108, 29.49, 29.49, 29.108, 27.389, 25.096,
23.567, 22.038, 20.318, 19.363, 18.599, 17.834, 16.306, 15.541, 16.879,
18.025, 19.172, 20.318, 21.274, 22.611)
time_temp <- c(11.86,   25.54,   40.13,   54.72,   67.49,   89.38,  111.27,  127.69,  151.40,  169.64,  180.59,  197.00,  213.42,  224.36,  228.01,  235.31,
240.78,  255.37,  264.50,  279.09,  299.15,  326.51,  344.76,  357.52,  379.41,  390.36,  404.95,  410.42,  421.37,  446.91,  472.44,  490.68,
501.63,  516.22,  530.81,  536.29,  543.58,  549.06,  558.18,  569.12,  587.36,  609.25,  616.55,  629.32,  640.26,  651.21, 662.15,  674.92,
684.04,  705.93,  727.82,  753.36,  766.12,  778.89,  789.84,  815.37,  829.97,  844.56,  855.50,  879.22,  890.16,  904.76,  923.00,  935.77,
946.71,  952.18,  964.95,  974.07,  981.37,  995.96, 1008.73, 1019.67, 1037.92, 1052.51, 1063.45, 1078.05, 1086.25)
# make one year seasonal temperature variation
temperature <- 24.5;
epsilon <- 0.2;
m = -30
sample_parameters <- seq(from = 0, to = 1086, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# We plot the the temperature variation over time to see if the epsilon is a good choice
#plot(sample_parameters, seasonal_temperature$temp, type = "l", ylim = c(13, 35))
#points(time_temp, time_vary_temp)
#plot(seasonal_temperature$temp, in_est_function(seasonal_temperature$temp))
abundance_snail_year_1 <- c(0.6, 0.583, 0.717, 0.53, 0.59, 0.59, 0.57, 0.60417, 0.55417, 0.58, 0.383,
0.383, 0.30, 0.35417, 0.33, 0.34583, 0.37083, 0.35, 0.37, 0.37917, 0.42917,
0.43, 0.33, 0.5083, 0.63)
abundance_snail_year_1 <- (10^abundance_snail_year_1-1)*85
abundance_snail_year_2 <- c(0.734579, 0.639252, 0.908411, 0.925233, 0.947663, 1.026168, 0.992523, 0.863551,
0.398130, 0.280373, 0.235514, 0.285981, 0.241121, 0.398130, 0.336448, 0.269158,
0.246728, 0.291588, 0.347663, 0.414953, 0.465420,
0.370093, 0.583177, 0.650467, 0.5214)
abundance_snail_year_2 <- (10^abundance_snail_year_2-1)*85
abundance_snail_year_3 <- c(0.603821656,0.557961783,0.61910828,0.771974522,0.512101911,0.458598726,0.351592357,0.397452229,
0.397452229,0.359235669,0.298089172,0.244585987,0.275159236,0.244585987,0.107006369,0.168152866,
0.221656051,0.259872611,0.443312102,0.542675159,0.565605096,0.557961783,0.557961783,0.687898089,
0.878980892)
abundance_snail_year_3 <- (10^abundance_snail_year_3-1)*85
average_of_three_years <- (abundance_snail_year_1+abundance_snail_year_2+abundance_snail_year_3)/3
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = average_of_three_years[1], SE = max(average_of_three_years)-average_of_three_years[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_one_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14, by = 14), average_of_three_years, col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
###### Run for three years
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14*3, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = abundance_snail_year_1[1], SE = max(abundance_snail_year_1)-abundance_snail_year_1[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_three_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14*3, by = 14), c(abundance_snail_year_1, abundance_snail_year_2, abundance_snail_year_3), col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
mid_temp <- 31
epsilon <- 0.2
year <- 3
sample_parameters <- seq(from = 0, to = 360*year, by = 1)
#set seasonal temperature
temp = mid_temp * (1 + epsilon * sin(2 * pi * (sample_parameters)/360))
#plot(sample_parameters, temp)
#plot(sample_parameters, in_estivation_afun(temp))
#This code estimates the eastivation function with saveral field studies
# Regarding abundance of snails with temperature.
# Clear environmet
rm(list = ls())
library(dplyr)
# We start with seting our eastivation function
# set the temperature of half saturation for snails estivation function at high temperatures
est_temp <- 23
# set the rate of snails move to the estivation stages
est_rate <- .02
# Set the steepness of estivation function for hot temperature
steepness <-  1
# Define a piecewise function for vector input
in_est_function <- function(x) {
y <- est_rate/(1+exp(-steepness*(x-est_temp)))
return(y)
}
# Define a piecewise function for vector input
out_est_function <- function(x) {
y <- est_rate/(1+exp(steepness*(x-est_temp)))
return(y)
}
### we set the model to run
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
in_est <- in_estivation_afun(t)
out_est <- out_estivation_afun(t)
dS <- -in_est * S + out_est * SE
dSE <- in_est * S - out_est * SE
return(list(c(S = dS, SE = dSE)))
})
}
time_vary_temp <-  c(25.478, 26.051, 26.433, 27.389, 27.962, 29.108, 29.49, 30.064,  30.828,
29.873, 29.108, 27.197, 27.197, 25.096, 23.185, 21.274, 19.745, 17.834,
17.261, 19.554, 19.172, 20.51, 22.229, 22.229, 22.803, 24.331, 27.771,
30.637, 31.592, 31.975, 32.166, 31.019, 30.446, 29.682, 28.344, 27.197,
25.86,  24.904, 24.14, 23.376, 21.274, 19.172,  18.408, 17.261, 15.924,
18.217, 19.554, 20.51, 22.038, 22.803, 23.758, 24.904, 26.433, 27.197,
27.962, 28.726, 28.344, 29.108, 29.49, 29.49, 29.108, 27.389, 25.096,
23.567, 22.038, 20.318, 19.363, 18.599, 17.834, 16.306, 15.541, 16.879,
18.025, 19.172, 20.318, 21.274, 22.611)
time_temp <- c(11.86,   25.54,   40.13,   54.72,   67.49,   89.38,  111.27,  127.69,  151.40,  169.64,  180.59,  197.00,  213.42,  224.36,  228.01,  235.31,
240.78,  255.37,  264.50,  279.09,  299.15,  326.51,  344.76,  357.52,  379.41,  390.36,  404.95,  410.42,  421.37,  446.91,  472.44,  490.68,
501.63,  516.22,  530.81,  536.29,  543.58,  549.06,  558.18,  569.12,  587.36,  609.25,  616.55,  629.32,  640.26,  651.21, 662.15,  674.92,
684.04,  705.93,  727.82,  753.36,  766.12,  778.89,  789.84,  815.37,  829.97,  844.56,  855.50,  879.22,  890.16,  904.76,  923.00,  935.77,
946.71,  952.18,  964.95,  974.07,  981.37,  995.96, 1008.73, 1019.67, 1037.92, 1052.51, 1063.45, 1078.05, 1086.25)
# make one year seasonal temperature variation
temperature <- 24.5;
epsilon <- 0.2;
m = -30
sample_parameters <- seq(from = 0, to = 1086, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# We plot the the temperature variation over time to see if the epsilon is a good choice
#plot(sample_parameters, seasonal_temperature$temp, type = "l", ylim = c(13, 35))
#points(time_temp, time_vary_temp)
#plot(seasonal_temperature$temp, in_est_function(seasonal_temperature$temp))
abundance_snail_year_1 <- c(0.6, 0.583, 0.717, 0.53, 0.59, 0.59, 0.57, 0.60417, 0.55417, 0.58, 0.383,
0.383, 0.30, 0.35417, 0.33, 0.34583, 0.37083, 0.35, 0.37, 0.37917, 0.42917,
0.43, 0.33, 0.5083, 0.63)
abundance_snail_year_1 <- (10^abundance_snail_year_1-1)*85
abundance_snail_year_2 <- c(0.734579, 0.639252, 0.908411, 0.925233, 0.947663, 1.026168, 0.992523, 0.863551,
0.398130, 0.280373, 0.235514, 0.285981, 0.241121, 0.398130, 0.336448, 0.269158,
0.246728, 0.291588, 0.347663, 0.414953, 0.465420,
0.370093, 0.583177, 0.650467, 0.5214)
abundance_snail_year_2 <- (10^abundance_snail_year_2-1)*85
abundance_snail_year_3 <- c(0.603821656,0.557961783,0.61910828,0.771974522,0.512101911,0.458598726,0.351592357,0.397452229,
0.397452229,0.359235669,0.298089172,0.244585987,0.275159236,0.244585987,0.107006369,0.168152866,
0.221656051,0.259872611,0.443312102,0.542675159,0.565605096,0.557961783,0.557961783,0.687898089,
0.878980892)
abundance_snail_year_3 <- (10^abundance_snail_year_3-1)*85
average_of_three_years <- (abundance_snail_year_1+abundance_snail_year_2+abundance_snail_year_3)/3
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = average_of_three_years[1], SE = max(average_of_three_years)-average_of_three_years[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_one_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14, by = 14), average_of_three_years, col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
###### Run for three years
sample_parameters <- seq(from = 0, to = length(average_of_three_years)*14*3, by = 1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature * (1 + epsilon * sin(2 * pi * (m+sample_parameters)/360)))
# Introduce eastivation function
in_estivation_afun <- approxfun(x = sample_parameters, y = in_est_function(seasonal_temperature$temp))
out_estivation_afun <- approxfun(x = sample_parameters, y = out_est_function(seasonal_temperature$temp))
# Set time span for model running
run_time <- seq(from = 0, to = length(sample_parameters)-1, by = 1)
## solve the system
model_outputs <- ode(y = c(S = abundance_snail_year_1[1], SE = max(abundance_snail_year_1)-abundance_snail_year_1[1]), times = run_time, func = thermal_sensitive_model, parms = 0)
# Plotting data and simulation
pdf(file = "richard_toll_biomphalari_three_years_abundance.pdf", width = 8, height = 8)
par(mar=c(6, 6, 5, 2), xpd = TRUE)
plot(model_outputs[,1], model_outputs[,2], col = 1,  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2, main = "", ylim = c(min(average_of_three_years)-70, max(average_of_three_years)+50))
points(seq(from = 14, to = length(average_of_three_years)*14*3, by = 14), c(abundance_snail_year_1, abundance_snail_year_2, abundance_snail_year_3), col = 2, pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, cex.axis=2)
# Adding legends
legend("topleft", legend = c("Simulation", "Data"), col = c(1, 2), pch = 21, lwd = 3)
mtext(text = "Day(s)", side = 1, line = 4, cex = 2)
mtext(text = "Abundance", side = 2, line = 4, cex = 2)
title(main =  expression(paste(italic(Biomphalari)," spp. in Richard Toll")), line = 2.5, cex.main = 1.5)
dev.off()
mid_temp <- 31
epsilon <- 0.2
year <- 3
sample_parameters <- seq(from = 0, to = 360*year, by = 1)
#set seasonal temperature
temp = mid_temp * (1 + epsilon * sin(2 * pi * (sample_parameters)/360))
#plot(sample_parameters, temp)
#plot(sample_parameters, in_estivation_afun(temp))
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/estimate_eastivation_function")
source("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/estimate_eastivation_function/s_haematobium_estimate_eastivation_function.R")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.mansoni/estimate_eastivation_function")
source("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.mansoni/estimate_eastivation_function/s_mansoni_estimate_eastivation_function.R")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/estimate_eastivation_function")
source("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/estimate_eastivation_function/s_haematobium_estimate_eastivation_function.R")
source("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/aestivation/s.haematobium/estimate_eastivation_function/s_haematobium_estimate_eastivation_function.R")
setwd("~/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality")
load("/Users/ibrahimhalilaslan/Library/CloudStorage/GoogleDrive-iaslan@stanford.edu/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/aestivation_model/2024_august_1st_ver_R/no_aestivation/s.mansoni/model_run_with_different_seasonality/august_2.RData")
library(ggplot2)
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, outputs_1_mpb, col = "blue",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
ylim = c(0, max(outputs_1_mpb)+20))
lines(temperature, outputs_2_mpb, col = "orange", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, outputs_3_mpb, col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
#legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 18, y = 120, legend =  round(temperature[which.max(outputs_1[5,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 18.5, y = 115, legend =  round(temperature[which.max(outputs_2[5,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 18.5, y = 110, legend =  round(temperature[which.max(outputs_3[5,])],4), cex = 1.5, bty = "n", text.col = 3)
#mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 4, cex = 2)
#mtext(text = expression(italic(S. mansoni)), side = 3, line = 4, cex = 2)
dev.off()
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
#convert mean parasite burden to prevalence
outputs_1 <- wormPrevalenceSm(outputs_1_mpb)
outputs_2 <- wormPrevalenceSm(outputs_2_mpb)
outputs_3 <- wormPrevalenceSm(outputs_3_mpb)
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_prevalence.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, outputs_1, col = "black",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
ylim = c(0, 1))
lines(temperature, outputs_2, col = "blue", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, outputs_3, col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = 29, y = 0.95, labels = expression((T[opt] * "," ~ Prev[max])), col = "black", cex = 1.2)
text(x = 29, y = 0.9, labels = '(24, 0.74)', col = "black", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_1)], y0 = max(outputs_1),
x1 = 27, y1 = 0.9, col = "black", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.85, labels = '(23.7, 0.69)', col = "blue", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_2)], y0 = max(outputs_2),
x1 = 27, y1 = 0.85, col = "blue", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.8, labels = '(21.8, 0.49)', col = "red", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_3)], y0 = max(outputs_3),
x1 = 27, y1 = 0.8, col = "red", length = 0.1, lty = 3, lwd = 3)
legend(x = 10, y = 1.075,  legend =  "No seasonality", bty = "n", cex = 1.5, text.col = "black")
#legend(x = 16.5, y = 0.64, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 1.025,  legend =  "Mild seasonality", bty = "n", cex = 1.5, text.col = "blue")
#legend(x = 16.5, y = 0.61, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = .975,  legend =  "Strong seasonality", bty = "n", cex = 1.5, text.col = "red")
#legend(x = 16.5, y = 0.58, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
#mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
mtext(text = expression(paste(italic(S.), " ", italic(mansoni))), side = 3, line = 4, cex = 2)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(outputs_1), which.max(outputs_2), which.max(outputs_3))
arrows(x0 = temperature[points_to_connect[1]], y0 = outputs_1[points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = outputs_2[points_to_connect[2]],
col = "black", length = 0.1, lty = 1, lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = outputs_2[points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = outputs_3[points_to_connect[3]],
col = "black", length = 0.1, lty = 1, lwd = 3)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_prevalence.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, outputs_1, col = "black",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
ylim = c(0, 1))
lines(temperature, outputs_2, col = "blue", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, outputs_3, col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = 29, y = 0.95, labels = expression((T[opt] * "," ~ Prev[max])), col = "black", cex = 1.2)
text(x = 29, y = 0.9, labels = '(24, 0.74)', col = "black", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_1)], y0 = max(outputs_1),
x1 = 27, y1 = 0.9, col = "black", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.85, labels = '(23.7, 0.69)', col = "blue", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_2)], y0 = max(outputs_2),
x1 = 27, y1 = 0.85, col = "blue", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.8, labels = '(21.8, 0.49)', col = "red", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_3)], y0 = max(outputs_3),
x1 = 27, y1 = 0.8, col = "red", length = 0.1, lty = 3, lwd = 3)
legend(x = 10, y = 1.075,  legend =  "No seasonality", bty = "n", cex = 1.5, text.col = "black")
#legend(x = 16.5, y = 0.64, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 1.025,  legend = expression(paste("Mild seasonality ", epsilon, " = 0.1")), bty = "n", cex = 1.5, text.col = "blue")
#legend(x = 16.5, y = 0.61, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = .975,  legend =  "Strong seasonality", bty = "n", cex = 1.5, text.col = "red")
#legend(x = 16.5, y = 0.58, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
#mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
mtext(text = expression(paste(italic(S.), " ", italic(mansoni))), side = 3, line = 4, cex = 2)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(outputs_1), which.max(outputs_2), which.max(outputs_3))
arrows(x0 = temperature[points_to_connect[1]], y0 = outputs_1[points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = outputs_2[points_to_connect[2]],
col = "black", length = 0.1, lty = 1, lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = outputs_2[points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = outputs_3[points_to_connect[3]],
col = "black", length = 0.1, lty = 1, lwd = 3)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_prevalence.pdf", width = 8, height = 8)
par(mar=c(6, 6, 6, 1), xpd = TRUE)
plot(temperature, outputs_1, col = "black",  pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2,
ylim = c(0, 1))
lines(temperature, outputs_2, col = "blue", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
lines(temperature, outputs_3, col = "red", pch = 21, lwd = 3, las = 1, ylab = "",  xlab = "", cex.lab = 2, type = "l", cex.axis=2)
text(x = 29, y = 0.95, labels = expression((T[opt] * "," ~ Prev[max])), col = "black", cex = 1.2)
text(x = 29, y = 0.9, labels = '(24, 0.74)', col = "black", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_1)], y0 = max(outputs_1),
x1 = 27, y1 = 0.9, col = "black", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.85, labels = '(23.7, 0.69)', col = "blue", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_2)], y0 = max(outputs_2),
x1 = 27, y1 = 0.85, col = "blue", length = 0.1, lty = 3, lwd = 3)
text(x = 29, y = 0.8, labels = '(21.8, 0.49)', col = "red", cex = 1.5)
arrows(x0 = temperature[which.max(outputs_3)], y0 = max(outputs_3),
x1 = 27, y1 = 0.8, col = "red", length = 0.1, lty = 3, lwd = 3)
legend(x = 10, y = 1.075,  legend = expression(paste("No seasonality, ", epsilon, " = 0")), bty = "n", cex = 1.5, text.col = "black")
#legend(x = 16.5, y = 0.64, legend =  round(temperature[which.max(out_come_season[1,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 1.025,  legend = expression(paste("Mild seasonality, ", epsilon, " = 0.1")), bty = "n", cex = 1.5, text.col = "blue")
#legend(x = 16.5, y = 0.61, legend =  round(temperature[which.max(out_come_season[2,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = .975,  legend = expression(paste("Strong seasonality, ", epsilon, " = 0.25")), bty = "n", cex = 1.5, text.col = "red")
#legend(x = 16.5, y = 0.58, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 3)
#legend(x = 13.2, y = 128,  legend =  "Opt. Temp. = ", bty = "n", cex = 1.5, text.col = 4)
#legend(x = 17.5, y = 128, legend =  round(temperature[which.max(out_come_season[3,])],4), cex = 1.5, bty = "n", text.col = 4)
#mtext(text = expression(paste("Mean annual temperature (",degree,"C)")), side = 1, line = 4, cex = 2)
mtext(text = "Prevalence", side = 2, line = 4, cex = 2)
mtext(text = expression(paste(italic(S.), " ", italic(mansoni))), side = 3, line = 4, cex = 2)
# Adding arrow passing over three points for outputs_1
points_to_connect <- c(which.max(outputs_1), which.max(outputs_2), which.max(outputs_3))
arrows(x0 = temperature[points_to_connect[1]], y0 = outputs_1[points_to_connect[1]],
x1 = temperature[points_to_connect[2]], y1 = outputs_2[points_to_connect[2]],
col = "black", length = 0.1, lty = 1, lwd = 3)
arrows(x0 = temperature[points_to_connect[2]], y0 = outputs_2[points_to_connect[2]],
x1 = temperature[points_to_connect[3]], y1 = outputs_3[points_to_connect[3]],
col = "black", length = 0.1, lty = 1, lwd = 3)
dev.off()
exp(4.844146)
k = 10^0.61521/126.9948
k
wormPrevalenceSm <- function(M) {
k <- exp(0.61521*log(M) - 4.844146)
p  <- 1 - (1+M/k)^(-k)    # fraction of humans with at least 1 parasites
return(p)
}
wormPrevalenceSm(10)
M = 10
exp(0.61521*log(M) - 4.844146)
M = 32
k = 32^0.61521/126.9948
k
exp(0.61521*log(M) - 4.844146)
exp(3.253653)
(60434 + 33232)/2
