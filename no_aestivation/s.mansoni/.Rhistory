setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper/seaso_mpb.R")
model_outputs
year <- 30
#Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = 0.1)
#set a sample space for temperature
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
j=2
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
epsilon =
.1
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 35.5,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 34,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
# Specified the parameter value. These might be changed later because they are prevalence dependent.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2,  E = 1285, I = 2340, P = 2, P_m = 105)
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
#Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = 0.1)
#set a sample space for temperature
sample_parameters <- seq(from = 0, to = 365*year+1, by = 0.1)
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + epsilon * sin(2 * pi * sample_parameters/365)))
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0))
mu_m_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0))
mu_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 35.5,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0)))
sigma_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0))
mu_i_afun <- approxfun(x = sample_parameters, y = ifelse(seasonal_temperature$temp <= 34,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0)))
nu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0))
mu_c_afun <- approxfun(x = sample_parameters, y = ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0))
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
beta_s_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0))
beta_h_afun <- approxfun(x = sample_parameters, y = ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0))
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * P_m)/(mu_m * (S + E + I)))) * S - mu * S
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E
dI <- sigma_s * E - mu_i * I
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, E = dE, I = dI, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value. These might be changed later because they are prevalence dependent.
parms0 <- c(nu, lambda)
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
colMeans(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]), 2:6])
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper/seaso_mpb.R")
out_puts[1:5,j] <- colMeans(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]), 2:6])
out_puts
out_puts[6,j] <- mean((model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),3]+model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),4])/rowSums(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),2:6]))
out_puts
colMeans(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]), 2:6])
mean((model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),3]+model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),4])/rowSums(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),2:6]))
out_puts[1:5,j] <- colMeans(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]), 2:6])
out_puts
out_puts[1:5,j]
out_puts[6,j] <- mean((model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),3]+model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),4])/rowSums(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]),2:6]))
out_puts[6,j]
out_puts[,j]
j
colMeans(model_outputs[(length(model_outputs[, 1])-5*366):length(model_outputs[, 1]), 2:6])
outputs_1 <- seaonality_effect(0)
delta_e_afun <- approxfun(x = sample_parameters, y = ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0))
outputs_1
outputs_1[6, ]
outputs_2 <- seaonality_effect(0.15)
outputs_3 <- seaonality_effect(0.3)
plot(temperature, outputs_1[6, ], col = 1, xlab = "",
type ="l", lwd = 3, ylab = "", cex.lab = 1.7, cex.main = 2, main = "")
lines(temperature, outputs_2[6, ], col = 2,  lwd = 3)
#lines(temperature, outputs_3[6, ], col = 3, lwd = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Prevalence in Snails", side = 2, line = 2, cex = 2)
mtext(text = "Seasonality optimal temperature", side = 1, line = -33, cex = 2)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
#lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
#legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[8,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[8,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[8,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
outputs_3
#Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = 0.02)
outputs_3 <- seaonality_effect(0.3)
run_time <- seq(from = 0, to = 365*year, by = 0.1)
outputs_3 <- seaonality_effect(0.25)
plot(temperature, outputs_1[6, ], col = 1, xlab = "",
type ="l", lwd = 3, ylab = "", cex.lab = 1.7, cex.main = 2, main = "")
lines(temperature, outputs_2[6, ], col = 2,  lwd = 3)
lines(temperature, outputs_3[6, ], col = 3, lwd = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Prevalence in Snails", side = 2, line = 2, cex = 2)
mtext(text = "Seasonality optimal temperature", side = 1, line = -33, cex = 2)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
#legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
#legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[8,])],4), cex = 1.5, bty = "n", text.col = 1)
#legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
#legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[8,])],4), cex = 1.5, bty = "n", text.col = 2)
#legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
#legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[8,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper/S.mansoni")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper/S.mansoni/seasonal_mod_run.R")
outputs_1
outputs_2
outputs_3
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[8,])],4), cex = 1.5, bty = "n", text.col = 1)
outputs_1
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
dev.off()
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 13.5, y = 130,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 130, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 13.5, y = 125,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 20.5, y = 125, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 13.5, y = 120,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 20.5, y = 120, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 20, y = 120, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 20.5, y = 115, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 20.5, y = 110, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 19, y = 120, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 19.5, y = 115, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 19.5, y = 110, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 17, y = 120, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 17.5, y = 115, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 17.5, y = 110, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 17.5, y = 120, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 18, y = 115, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 18, y = 110, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 18, y = 120, legend =  round(temperature[which.max(outputs_1[6,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 18.5, y = 115, legend =  round(temperature[which.max(outputs_2[6,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 18.5, y = 110, legend =  round(temperature[which.max(outputs_3[6,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
outputs_1[7,]
# Plot mean parasite burden for three different seasonality
pdf(file = "seasonal_mpb.pdf", width = 8, height = 8)
plot(temperature, outputs_1[5,], col = 1, xlab = "", type ="l", lwd = 3,
ylab = "", cex.lab = 2, cex.main = 2, main = "")
lines(temperature, outputs_2[5,], col = 2, type ="l", lwd = 3)
lines(temperature, outputs_3[5,], col = 3, type ="l", lwd = 3)
legend(x = 10, y = 120,  legend =  "No seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 1)
legend(x = 18, y = 120, legend =  round(temperature[which.max(outputs_1[5,])],4), cex = 1.5, bty = "n", text.col = 1)
legend(x = 10, y = 115,  legend =  "Mild. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 2)
legend(x = 18.5, y = 115, legend =  round(temperature[which.max(outputs_2[5,])],4), cex = 1.5, bty = "n", text.col = 2)
legend(x = 10, y = 110,  legend =  "Sev. seas. Opt. Temp. =", bty = "n", cex = 1.5, text.col = 3)
legend(x = 18.5, y = 110, legend =  round(temperature[which.max(outputs_3[5,])],4), cex = 1.5, bty = "n", text.col = 3)
mtext(text = "Temperature", side = 1, line = 2.5, cex = 2)
mtext(text = "Mean parasite burden", side = 2, line = 2.5, cex = 2)
#mtext(text = "Mean of MPB during one seasonal year", side = 3, line = 2.5, cex = 2)
dev.off()
